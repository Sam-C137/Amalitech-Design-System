{
  "timestamp": "2024-08-07T09:04:20",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.10.0",
    "typescriptVersion": "5.3.3"
  },
  "components": [
    {
      "filePath": "src/components/amalitech-accordion/amalitech-accordion.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-accordion",
      "readme": "# amalitech-accordion\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "Indicates whether the accordion is animated or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "The description or content to be displayed when the accordion is expanded.",
          "docsTags": [],
          "default": "'Content'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label for the accordion button.",
          "docsTags": [],
          "default": "'Label'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "toggle",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the accordion is toggled.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--accordionBackground",
          "annotation": "prop",
          "docs": "Background color of the accordion, default is `#f6f6f8`"
        },
        {
          "name": "--accordionFocusColor",
          "annotation": "prop",
          "docs": "Color of the accordion outline when focused, default is `#eb9c7f`"
        },
        {
          "name": "--accordionFontFamily",
          "annotation": "prop",
          "docs": "Font family of the accordion label, default is `$base-font-family`"
        },
        {
          "name": "--accordionFontSize",
          "annotation": "prop",
          "docs": "Font size of the accordion, default is `1rem`"
        },
        {
          "name": "--accordionFontWeight",
          "annotation": "prop",
          "docs": "Font weight of the accordion label, default is `#d3d3d3`"
        },
        {
          "name": "--accordionLabelPadding",
          "annotation": "prop",
          "docs": "Padding between the icon and the accordion label, default is `1rem`"
        },
        {
          "name": "--openedAccordionBorder",
          "annotation": "prop",
          "docs": "Border of the opened accordion, default is `0.063rem solid #f6f6f8`"
        },
        {
          "name": "--openedAccordionPadding",
          "annotation": "prop",
          "docs": "Padding around the opened accordion, default is `0.5rem 1rem`"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-alert/amalitech-alert/amalitech-alert.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-alert",
      "readme": "# amalitech-alert\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'global'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"bottom-left\" | \"bottom-right\" | \"top-left\" | \"top-right\"",
          "complexType": {
            "original": "'top-right' | 'top-left' | 'bottom-right' | 'bottom-left'",
            "resolved": "\"bottom-left\" | \"bottom-right\" | \"top-left\" | \"top-right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "position of the alert",
          "docsTags": [],
          "default": "'bottom-right'",
          "values": [
            {
              "value": "bottom-left",
              "type": "string"
            },
            {
              "value": "bottom-right",
              "type": "string"
            },
            {
              "value": "top-left",
              "type": "string"
            },
            {
              "value": "top-right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "alert:alert-notification",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "amalitech-alert-content"
      ],
      "dependencyGraph": {
        "amalitech-alert": [
          "amalitech-alert-content"
        ]
      }
    },
    {
      "filePath": "src/components/amalitech-alert/amalitech-alert-content/amalitech-alert-content.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-alert-content",
      "readme": "# amalitech-alert-content\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "actionLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "action-label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'Dismiss'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "actionName",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "action-name",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'dismiss'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "actionable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "actionable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dismissible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "dismissible",
          "reflectToAttr": false,
          "docs": "renders a close button to close the alert",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "highContrast",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "high-contrast",
          "reflectToAttr": false,
          "docs": "enables the high contrast color scheme",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"error\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'success' | 'error' | 'info' | 'warning'",
            "resolved": "\"error\" | \"info\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "type of alert to be shown",
          "docsTags": [],
          "default": "'info'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "alert:alert-content-dismiss",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "dismiss alert event",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "amalitech-alert"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "amalitech-alert": [
          "amalitech-alert-content"
        ]
      }
    },
    {
      "filePath": "src/components/amalitech-breadcrumb/amalitech-breadcrumb/amalitech-breadcrumb.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-breadcrumb",
      "readme": "# amalitech-breadcrumb\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "align",
          "type": "\"center\" | \"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right' | 'center'",
            "resolved": "\"center\" | \"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "align",
          "reflectToAttr": false,
          "docs": "Alignment of the breadcrumb items.",
          "docsTags": [],
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "separator",
          "type": "\"arrow\" | \"dot\" | \"slash\"",
          "complexType": {
            "original": "'dot' | 'arrow' | 'slash'",
            "resolved": "\"arrow\" | \"dot\" | \"slash\"",
            "references": {}
          },
          "mutable": false,
          "attr": "separator",
          "reflectToAttr": false,
          "docs": "Separator between the breadcrumb items.",
          "docsTags": [],
          "values": [
            {
              "value": "arrow",
              "type": "string"
            },
            {
              "value": "dot",
              "type": "string"
            },
            {
              "value": "slash",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Size of the breadcrumb items.",
          "docsTags": [],
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-breadcrumb/amalitech-breadcrumb-item/amalitech-breadcrumb-item.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-breadcrumb-item",
      "readme": "# amalitech-breadcrumb-item\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "Indicates whether the breadcrumb item is the current page's item.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "The URL to navigate to when the breadcrumb item is clicked.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "The target of the breadcrumb item link. Only applies when an `href` is provided.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-button/amalitech-button.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-button",
      "readme": "# amalitech-button\r\n\r\n\r\n\r",
      "docs": "The Button component is a wrapper for the native button element with custom styling and variations.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The default slot for button content, text + icon or text only."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "The disabled state of the button. If set to true, interactions would not be alowed,\r\ncolor will also change",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconPosition",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-position",
          "reflectToAttr": true,
          "docs": "Position of an icon in the button, default set to right",
          "docsTags": [],
          "default": "'right'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "innerAriaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inner-aria-label",
          "reflectToAttr": false,
          "docs": "(optional) Any aria label",
          "docsTags": [],
          "default": "'Button label'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "innerTabIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "inner-tab-index",
          "reflectToAttr": false,
          "docs": "The tabindex of the inner button element",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "(optional) Any name of the button element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Size of the button",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "'button' | 'reset' | 'submit'",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "The type attribute of the button",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "(optional) Any value of the button element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"dark\" | \"default\" | \"info\" | \"light\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\"",
          "complexType": {
            "original": "Colors",
            "resolved": "\"danger\" | \"dark\" | \"default\" | \"info\" | \"light\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\"",
            "references": {
              "Colors": {
                "location": "import",
                "path": "../../global/types",
                "id": "src/global/types.ts::Colors"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "The color of the button, default is 'default'",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--amalitech-button-bg",
          "annotation": "prop",
          "docs": "Background color of the button, default is `#C1C4D6`"
        },
        {
          "name": "--amalitech-button-bg-hover",
          "annotation": "prop",
          "docs": "Background color of the button on hover, default is `#8F95B2`"
        },
        {
          "name": "--amalitech-button-color",
          "annotation": "prop",
          "docs": "Color of the button text, default is `#474D66`"
        },
        {
          "name": "--amalitech-button-focus-color",
          "annotation": "prop",
          "docs": "Color of the button outline when focused, default is `#eb9c7f`"
        },
        {
          "name": "--amalitech-button-font-size",
          "annotation": "prop",
          "docs": "Font size of the button text, default is `1rem`"
        },
        {
          "name": "--amalitech-button-plr",
          "annotation": "prop",
          "docs": "Padding left and right of the button, default is `1.5rem`"
        },
        {
          "name": "--amalitech-button-ptb",
          "annotation": "prop",
          "docs": "Padding top and bottom of the button, default is `0.75rem`"
        },
        {
          "name": "--amalitech-button-radius",
          "annotation": "prop",
          "docs": "Border radius of the button, default is `0.313rem`"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The default slot for button content, text + icon or text only."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-card/amalitech-card.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-card",
      "readme": "# amalitech-card\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "The disabled state of the card. If set to true, interactions would not be alowed,",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "The href attribute of the card. If set, the card would render as an anchor tag.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "The target attribute of the card. If href is set, the target defaults to _blank",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "withHoverAnimation",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "with-hover-animation",
          "reflectToAttr": false,
          "docs": "The hover animation state of the card. If set to true, the card would have a hover animation.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--backgroundColor",
          "annotation": "prop",
          "docs": "Background color of the card, default is `#f6f6f8`;"
        },
        {
          "name": "--card-body-padding-horizontal",
          "annotation": "prop",
          "docs": "Padding left and right of the card body, default is `1.25rem`;"
        },
        {
          "name": "--card-body-padding-vertical",
          "annotation": "prop",
          "docs": "Padding top and bottom of the card body, default is `1.25rem`;"
        },
        {
          "name": "--card-radius",
          "annotation": "prop",
          "docs": "Border radius of the card, default is `0.5rem`;"
        },
        {
          "name": "--card-shadow",
          "annotation": "prop",
          "docs": "Box shadow of the card, default is `0px 8px 32px 0px hsla(0, 0%, 0%, 0.1), 0px 4px 8px 0px hsla(0, 0%, 0%, 0.1)`;"
        },
        {
          "name": "--card-shadow-hover",
          "annotation": "prop",
          "docs": "Box shadow of the card on hover, default is `0px 8px 32px 0px hsla(0, 0%, 0%, 0.2), 0px 4px 8px 0px hsla(0, 0%, 0%, 0.2)`;"
        },
        {
          "name": "--textColor",
          "annotation": "prop",
          "docs": "Text color of the card, default is `#474d66`;"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-checkbox/amalitech-checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-checkbox",
      "readme": "# amalitech-checkbox\r\n\r\n\r\n\r",
      "docs": "Checkbox is an extension to the standard checkbox element with theming.",
      "docsTags": [
        {
          "name": "part",
          "text": "amalitech-checkbox-box-highlight - This represents the container that encapsulates the checkbox mark and its associated visual elements."
        },
        {
          "name": "part",
          "text": "amalitech-checkbox-box - This refers to the actual checkmark symbol within the checkbox, indicating the checked state of the component."
        },
        {
          "name": "slot",
          "text": "label - Represents the label or content associated with the checkbox.\r\nUse this slot to provide descriptive text or additional content that accompanies the checkbox."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "anyTabIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "any-tab-index",
          "reflectToAttr": false,
          "docs": "Index of the element in tabbing order",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "binary",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "binary",
          "reflectToAttr": false,
          "docs": "Allows to select a boolean value instead of multiple values.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checkboxIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "checkbox-icon",
          "reflectToAttr": false,
          "docs": "Icon class of the checkbox icon.",
          "docsTags": [],
          "default": "'fa-solid:check'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "If `true`, the checkbox is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "Identifier of the focus input to match a label defined for the component.",
          "docsTags": [],
          "default": "`amalitech-cb-${checkboxIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the checkbox.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelStyleClass",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "label-style-class",
          "reflectToAttr": false,
          "docs": "Style class of the label.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the checkbox group.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the component cannot be edited.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "style-class",
          "reflectToAttr": false,
          "docs": "Style class of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the checkbox does not mean if it's checked or not, use the `checked`\r\nproperty for that.\r\n\r\nThe value of a checkbox is analogous to the value of an `<input type=\"checkbox\">`,\r\nit's only used when the checkbox participates in a native `<form>`.",
          "docsTags": [],
          "default": "'on'",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "inputFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "inputFocus() => Promise<void>",
          "parameters": [],
          "docs": "Focuses on the checkbox element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "aOnBlur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle loses focus.",
          "docsTags": []
        },
        {
          "event": "aOnFocus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle has focus.",
          "docsTags": []
        },
        {
          "event": "valueChange",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": false,
          "docs": "Callback to invoke when value of dropdown changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--checkboxActiveBg",
          "annotation": "prop",
          "docs": "The background color of the checkbox when active."
        },
        {
          "name": "--checkboxActiveBorderColor",
          "annotation": "prop",
          "docs": "The border color of the checkbox when active."
        },
        {
          "name": "--checkboxActiveHoverBg",
          "annotation": "prop",
          "docs": "The background color of the checkbox when active and hovered."
        },
        {
          "name": "--checkboxActiveHoverBorderColor",
          "annotation": "prop",
          "docs": "The border color of the checkbox when active and hovered."
        },
        {
          "name": "--checkboxBgColor",
          "annotation": "prop",
          "docs": "The background color of the checkbox when unchecked."
        },
        {
          "name": "--checkboxBorder",
          "annotation": "prop",
          "docs": "The border of the checkbox."
        },
        {
          "name": "--checkboxFontSize",
          "annotation": "prop",
          "docs": "The font size of the checkbox label."
        },
        {
          "name": "--checkboxGap",
          "annotation": "prop",
          "docs": "The gap between the checkbox and the label."
        },
        {
          "name": "--checkboxHeight",
          "annotation": "prop",
          "docs": "The height of the checkbox."
        },
        {
          "name": "--checkboxHoverBorderColor",
          "annotation": "prop",
          "docs": "The border color of the checkbox when hovered."
        },
        {
          "name": "--checkboxIconActiveColor",
          "annotation": "prop",
          "docs": "The color of the checkbox icon when active."
        },
        {
          "name": "--checkboxIconActiveHoverColor",
          "annotation": "prop",
          "docs": "The color of the checkbox icon when active and hovered."
        },
        {
          "name": "--checkboxIconFontSize",
          "annotation": "prop",
          "docs": "The font size of the checkbox icon."
        },
        {
          "name": "--checkboxLabelColor",
          "annotation": "prop",
          "docs": "The color of the checkbox label."
        },
        {
          "name": "--checkboxWidth",
          "annotation": "prop",
          "docs": "The width of the checkbox."
        }
      ],
      "slots": [
        {
          "name": "label",
          "docs": "Represents the label or content associated with the checkbox.\r\nUse this slot to provide descriptive text or additional content that accompanies the checkbox."
        }
      ],
      "parts": [
        {
          "name": "amalitech-checkbox-box",
          "docs": "This refers to the actual checkmark symbol within the checkbox, indicating the checked state of the component."
        },
        {
          "name": "amalitech-checkbox-box-highlight",
          "docs": "This represents the container that encapsulates the checkbox mark and its associated visual elements."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-data-table/amalitech-data-table.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-data-table",
      "readme": "# amalitech-data-table\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "actions",
          "type": "Action[]",
          "complexType": {
            "original": "Action[]",
            "resolved": "Action[]",
            "references": {
              "Action": {
                "location": "import",
                "path": "./table-interface",
                "id": "src/components/amalitech-data-table/table-interface.ts::Action"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "actions to be performed on each row\r\n[{\r\n 'icon': '<svg></svg>',\r\n 'callback': () => {},\r\n }]",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "Action[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "columns",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Columns configuration.\r\n[\r\n{\r\n  \"name\":\"name\",\r\n  \"label\":\"Name\",\r\n  \"width\":300,\r\n  \"fixed\":true,\r\n  \"template\": function(row, column) { return row[column.name];}\r\n },\r\n{\r\n  \"name\":\"age\",\r\n  \"label\":\"Age\"\r\n}\r\n]",
          "docsTags": [],
          "default": "[\r\n    {\r\n      name: 'name',\r\n      label: 'Name',\r\n    },\r\n    {\r\n      name: 'age',\r\n      label: 'Age',\r\n    },\r\n    {\r\n      name: 'company',\r\n      label: 'Company',\r\n    },\r\n  ]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "data",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Data to display on table\r\n[{\r\n 'id': '5',\r\n 'age': 21,\r\n 'name': 'John',\r\n 'company': 'India',\r\n 'email': 'john@example.com',\r\n 'phone': '+23356977855',\r\n 'address': '326 Irving Street, Ghana'\r\n }]",
          "docsTags": [],
          "default": "[\r\n    {\r\n      _id: '1',\r\n      index: 0,\r\n      age: 21,\r\n      name: 'Courtney Courtney',\r\n      company: 'XYQAG',\r\n    },\r\n    {\r\n      _id: '2',\r\n      index: 1,\r\n      age: 34,\r\n      name: 'Wilcox',\r\n      company: 'STRALOY',\r\n    },\r\n    {\r\n      _id: '3',\r\n      index: 2,\r\n      age: 22,\r\n      name: 'Lucas',\r\n      company: 'LUNCHPOD',\r\n    },\r\n    {\r\n      _id: '4',\r\n      index: 3,\r\n      age: 23,\r\n      name: 'David',\r\n      company: 'VELOS',\r\n    },\r\n    {\r\n      _id: '5',\r\n      index: 4,\r\n      age: 30,\r\n      name: 'Dorothea',\r\n      company: 'ZILLAN',\r\n    },\r\n    {\r\n      _id: '6',\r\n      index: 5,\r\n      age: 25,\r\n      name: 'Guy',\r\n      company: 'ISOTERNIA',\r\n    },\r\n    {\r\n      _id: '7',\r\n      index: 6,\r\n      age: 25,\r\n      name: 'Gary',\r\n      company: 'ISOTERNIA',\r\n    },\r\n    {\r\n      _id: '8',\r\n      index: 7,\r\n      age: 25,\r\n      name: 'Payton',\r\n      company: 'ISOTERNIA',\r\n    },\r\n  ]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "emptyStateDescription",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "empty-state-description",
          "reflectToAttr": false,
          "docs": "Description text to display when the table is empty.",
          "docsTags": [
            {
              "name": "default",
              "text": "'There are no items to display'"
            }
          ],
          "default": "'There are no items to display'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "emptyStateHeadline",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "empty-state-headline",
          "reflectToAttr": false,
          "docs": "Headline text to display when the table is empty.",
          "docsTags": [
            {
              "name": "default",
              "text": "'No items'"
            }
          ],
          "default": "'No items'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headerAlignment",
          "type": "\"center\" | \"left\" | \"right\"",
          "complexType": {
            "original": "'center' | 'left' | 'right'",
            "resolved": "\"center\" | \"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "header-alignment",
          "reflectToAttr": false,
          "docs": "Alignment of the table header ('center', 'left', or 'right').",
          "docsTags": [
            {
              "name": "default",
              "text": "'left'"
            }
          ],
          "default": "'left'",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keyField",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "key-field",
          "reflectToAttr": false,
          "docs": "Key field to uniquely identify each row.",
          "docsTags": [
            {
              "name": "default",
              "text": "'id'"
            }
          ],
          "default": "'id'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "managed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "managed",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "page",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "page",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pageSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "page-size",
          "reflectToAttr": false,
          "docs": "changes the amount of items on each page | pagination",
          "docsTags": [],
          "default": "5",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "paginate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "paginate",
          "reflectToAttr": false,
          "docs": "add pagination to the page",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedRowKeys",
          "type": "string[]",
          "complexType": {
            "original": "string[]",
            "resolved": "string[]",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Selected row keys.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionType",
          "type": "\"checkbox\" | undefined",
          "complexType": {
            "original": "'checkbox' | undefined",
            "resolved": "\"checkbox\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "selection-type",
          "reflectToAttr": false,
          "docs": "Type of selection ('checkbox' or undefined).",
          "docsTags": [],
          "values": [
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortBy",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "sort-by",
          "reflectToAttr": false,
          "docs": "sortable string",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortOrder",
          "type": "\"asc\" | \"desc\"",
          "complexType": {
            "original": "'asc' | 'desc'",
            "resolved": "\"asc\" | \"desc\"",
            "references": {}
          },
          "mutable": true,
          "attr": "sort-order",
          "reflectToAttr": false,
          "docs": "changes the sort direction",
          "docsTags": [],
          "default": "'asc'",
          "values": [
            {
              "value": "asc",
              "type": "string"
            },
            {
              "value": "desc",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "sortable",
          "reflectToAttr": false,
          "docs": "makes the table data sortable",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalItems",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "total-items",
          "reflectToAttr": false,
          "docs": "Total number of items in the data set.",
          "docsTags": [
            {
              "name": "default",
              "text": "undefined"
            }
          ],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "table:table-cell-click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a cell is clicked.",
          "docsTags": [
            {
              "name": "event",
              "text": "table:table-cell-click"
            },
            {
              "name": "property",
              "text": "{Object} detail - The event detail."
            },
            {
              "name": "property",
              "text": "{Object} detail.record - The clicked row."
            },
            {
              "name": "property",
              "text": "{Object} detail.column - The clicked column."
            },
            {
              "name": "property",
              "text": "{boolean} detail.altKey - Whether the Alt key was pressed during the click."
            },
            {
              "name": "property",
              "text": "{boolean} detail.ctrlKey - Whether the Ctrl key was pressed during the click."
            },
            {
              "name": "property",
              "text": "{boolean} detail.metaKey - Whether the Meta key was pressed during the click."
            },
            {
              "name": "property",
              "text": "{boolean} detail.shiftKey - Whether the Shift key was pressed during the click."
            }
          ]
        },
        {
          "event": "table:table-page",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when pagination is changed.",
          "docsTags": [
            {
              "name": "event",
              "text": "table:table-page"
            },
            {
              "name": "property",
              "text": "{Object} detail - The event detail."
            },
            {
              "name": "property",
              "text": "{number} detail.page - The current page number."
            },
            {
              "name": "property",
              "text": "{number} detail.pageSize - The number of items per page."
            }
          ]
        },
        {
          "event": "table:table-select-change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the selection changes.",
          "docsTags": [
            {
              "name": "event",
              "text": "table:table-select-change"
            },
            {
              "name": "property",
              "text": "{Object} detail - The event detail."
            },
            {
              "name": "property",
              "text": "{string[]} detail.value - The keys of selected rows."
            },
            {
              "name": "property",
              "text": "{boolean} detail.isSelectAll - Whether all rows are selected."
            }
          ]
        },
        {
          "event": "table:table-sort",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when sorting is applied to the table.",
          "docsTags": [
            {
              "name": "event",
              "text": "table:table-sort"
            },
            {
              "name": "property",
              "text": "{Object} detail - The event detail."
            },
            {
              "name": "property",
              "text": "{string} detail.sortBy - The column name to sort by."
            },
            {
              "name": "property",
              "text": "{'asc' | 'desc'} detail.sortOrder - The sorting order ('asc' or 'desc')."
            }
          ]
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-date-picker/amalitech-date-picker.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-date-picker",
      "readme": "# amalitech-date-picker\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "The disabled state of the date picker",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "firstDayOfWeek",
          "type": "\"0\" | \"1\"",
          "complexType": {
            "original": "'0' | '1'",
            "resolved": "\"0\" | \"1\"",
            "references": {}
          },
          "mutable": false,
          "attr": "first-day-of-week",
          "reflectToAttr": false,
          "docs": "The first day of the week, 0 for Sunday and 1 for Monday",
          "docsTags": [],
          "default": "'1'",
          "values": [
            {
              "value": "0",
              "type": "string"
            },
            {
              "value": "1",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconPosition",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-position",
          "reflectToAttr": false,
          "docs": "The icon position of the date picker, either `left` or `right`, default is `right`",
          "docsTags": [],
          "default": "'right'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label of the date picker",
          "docsTags": [],
          "default": "'Pick a Date'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The maximum date that a user can select in the format `YYYY-MM-DD`",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The minimum date that a user can select in the format `YYYY-MM-DD`",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outputFormat",
          "type": "\"DD-MM-YYYY\" | \"YYYY-MM-DD\"",
          "complexType": {
            "original": "'YYYY-MM-DD' | 'DD-MM-YYYY'",
            "resolved": "\"DD-MM-YYYY\" | \"YYYY-MM-DD\"",
            "references": {}
          },
          "mutable": false,
          "attr": "output-format",
          "reflectToAttr": false,
          "docs": "The output format of the date picker, either `YYYY-MM-DD` or `DD-MM-YYYY`, default is `YYYY-MM-DD`",
          "docsTags": [],
          "default": "'YYYY-MM-DD'",
          "values": [
            {
              "value": "DD-MM-YYYY",
              "type": "string"
            },
            {
              "value": "YYYY-MM-DD",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outputType",
          "type": "\"date\" | \"string\"",
          "complexType": {
            "original": "'string' | 'date'",
            "resolved": "\"date\" | \"string\"",
            "references": {}
          },
          "mutable": false,
          "attr": "output-type",
          "reflectToAttr": false,
          "docs": "The output type of the date picker, either `string` or `date`, default is `string`",
          "docsTags": [],
          "default": "'string'",
          "values": [
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "string",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the date picker in the format `YYYY-MM-DD`",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "This method toggles the date picker close",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "This method toggles the date picker open",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "amalitechDateChange",
          "detail": "Date | string",
          "bubbles": true,
          "complexType": {
            "original": "string | Date",
            "resolved": "Date | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "The date change event that is emitted when the date changes",
          "docsTags": []
        },
        {
          "event": "amalitechDateClear",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "The date clear event is emitted when the date selection is cleared",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--date-picker-active-color",
          "annotation": "prop",
          "docs": "The active color for the date picker default is `#dd5928`"
        },
        {
          "name": "--date-picker-active-text-color",
          "annotation": "prop",
          "docs": "The text color for the date picker individual date button that is active default is `#fff`"
        },
        {
          "name": "--date-picker-calendar-bg",
          "annotation": "prop",
          "docs": "The background color of the date picker calendar default is `#fff`"
        },
        {
          "name": "--date-picker-calendar-border-color",
          "annotation": "prop",
          "docs": "The border color for the date picker calendar default is `#d8dae5`"
        },
        {
          "name": "--date-picker-calendar-border-radius",
          "annotation": "prop",
          "docs": "The border radius for the date picker calendar default is `0.5rem`"
        },
        {
          "name": "--date-picker-calendar-footer-margin-top",
          "annotation": "prop",
          "docs": "The margin top for the date picker calendar footer default is `1.25rem`"
        },
        {
          "name": "--date-picker-calendar-header-font-size",
          "annotation": "prop",
          "docs": "The font size for the date picker calendar header default is `1.5rem`"
        },
        {
          "name": "--date-picker-calendar-header-font-weight",
          "annotation": "prop",
          "docs": "The font weight for the date picker calendar header default is `600`"
        },
        {
          "name": "--date-picker-calendar-header-gap",
          "annotation": "prop",
          "docs": "The gap for the date picker calendar header default is `0.5rem`"
        },
        {
          "name": "--date-picker-calendar-padding",
          "annotation": "prop",
          "docs": "The padding for the date picker calendar default is `0.625rem`"
        },
        {
          "name": "--date-picker-confirm-text-color",
          "annotation": "prop",
          "docs": "The text color for the date picker confirm button default is `#fff`"
        },
        {
          "name": "--date-picker-date-background-color",
          "annotation": "prop",
          "docs": "The background color for the date picker individual date button default is `#fff`"
        },
        {
          "name": "--date-picker-date-border-color",
          "annotation": "prop",
          "docs": "The border color for the date picker individual date button default is `#d8dae5`"
        },
        {
          "name": "--date-picker-date-border-radius",
          "annotation": "prop",
          "docs": "The border radius for the date picker date default is `0.625rem`"
        },
        {
          "name": "--date-picker-date-border-thickness",
          "annotation": "prop",
          "docs": "The border thickness the date picker individual date button default is `0.35rem`"
        },
        {
          "name": "--date-picker-date-font-size",
          "annotation": "prop",
          "docs": "The font size for the date picker individual date button default is `1rem`"
        },
        {
          "name": "--date-picker-date-hover-background-color",
          "annotation": "prop",
          "docs": "The hover background color for the date picker individual date button default is `#f5f5f5`"
        },
        {
          "name": "--date-picker-date-not-current-month-background-color",
          "annotation": "prop",
          "docs": "The background color for the date picker individual date button that is not in the current month default is `#f5f5f5`"
        },
        {
          "name": "--date-picker-date-not-current-month-text-color",
          "annotation": "prop",
          "docs": "The text color for the date picker individual date button that is not in the current month default is `#c1c4d6`"
        },
        {
          "name": "--date-picker-date-padding",
          "annotation": "prop",
          "docs": "The padding for the date picker date default is `0.313rem`"
        },
        {
          "name": "--date-picker-days-font-size",
          "annotation": "prop",
          "docs": "The font size for the date picker days default is `1rem`"
        },
        {
          "name": "--date-picker-days-font-weight",
          "annotation": "prop",
          "docs": "The font weight for the date picker days default is `600`"
        },
        {
          "name": "--date-picker-days-margin-bottom",
          "annotation": "prop",
          "docs": "The margin bottom for the date picker days default is `0.625rem`"
        },
        {
          "name": "--date-picker-disabled-color",
          "annotation": "prop",
          "docs": "The disabled color for the date picker default is `#c1c4d6`"
        },
        {
          "name": "--date-picker-dropdown-background",
          "annotation": "prop",
          "docs": "The background for the date picker dropdown default is `#fff`"
        },
        {
          "name": "--date-picker-dropdown-border-color",
          "annotation": "prop",
          "docs": "The border color for the date picker dropdown default is `#d8dae5`"
        },
        {
          "name": "--date-picker-dropdown-font-size",
          "annotation": "prop",
          "docs": "The font size for the date picker dropdown default is `1rem`"
        },
        {
          "name": "--date-picker-dropdown-font-weight",
          "annotation": "prop",
          "docs": "The font weight for the date picker dropdown default is `500`"
        },
        {
          "name": "--date-picker-dropdown-gap",
          "annotation": "prop",
          "docs": "The gap for the date picker dropdown default is `0.625rem`"
        },
        {
          "name": "--date-picker-dropdown-padding",
          "annotation": "prop",
          "docs": "The padding for the date picker dropdown default is `0.625rem`"
        },
        {
          "name": "--date-picker-font-family",
          "annotation": "prop",
          "docs": "The font family for the date picker default is `'Work Sans', 'sans-serif'`"
        },
        {
          "name": "--date-picker-footer-button-border-radius",
          "annotation": "prop",
          "docs": "The border radius for the date picker footer button default is `0.35rem`"
        },
        {
          "name": "--date-picker-footer-button-font-size",
          "annotation": "prop",
          "docs": "The font size for the date picker footer button default is `0.85rem`"
        },
        {
          "name": "--date-picker-footer-button-font-weight",
          "annotation": "prop",
          "docs": "The font weight for the date picker footer button default is `500`"
        },
        {
          "name": "--date-picker-footer-button-padding",
          "annotation": "prop",
          "docs": "The padding for the date picker footer button default is `0.5rem`"
        },
        {
          "name": "--date-picker-header-buttons-gap",
          "annotation": "prop",
          "docs": "The gap for the date picker header buttons default is `0.5rem`"
        },
        {
          "name": "--date-picker-panel-bg",
          "annotation": "prop",
          "docs": "The background color for the date picker panel default is `#fff`"
        },
        {
          "name": "--date-picker-panel-border-color",
          "annotation": "prop",
          "docs": "The border color for the date picker panel default is `#8f95b2`"
        },
        {
          "name": "--date-picker-panel-border-radius",
          "annotation": "prop",
          "docs": "The border radius for the date picker panel default is `0.313rem`"
        },
        {
          "name": "--date-picker-panel-display",
          "annotation": "prop",
          "docs": "The display for the date picker panel default is `block`"
        },
        {
          "name": "--date-picker-panel-font-size",
          "annotation": "prop",
          "docs": "The font size for the date picker panel default is `1 rem`"
        },
        {
          "name": "--date-picker-panel-gap",
          "annotation": "prop",
          "docs": "The gap for the date picker panel default is `0.625rem`"
        },
        {
          "name": "--date-picker-panel-opacity",
          "annotation": "prop",
          "docs": "The opacity for the date picker panel default is `1`"
        },
        {
          "name": "--date-picker-panel-padding",
          "annotation": "prop",
          "docs": "The padding for the date picker panel default is `0.313rem`"
        },
        {
          "name": "--date-picker-panel-text-color",
          "annotation": "prop",
          "docs": "The text color for the date picker panel default is `#8f95b2`"
        },
        {
          "name": "--date-picker-today-background-color",
          "annotation": "prop",
          "docs": "The background color for the date picker today button default is `#fff`"
        },
        {
          "name": "--date-picker-today-font-size",
          "annotation": "prop",
          "docs": "The font size for the date picker today button default is `1rem`"
        },
        {
          "name": "--date-picker-today-font-weight",
          "annotation": "prop",
          "docs": "The font weight for the date picker today button default is `600`"
        },
        {
          "name": "--date-picker-transition-duration",
          "annotation": "prop",
          "docs": "The transition duration for the date picker default is `0.3s`"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-docked-utility/docked-utility-bar/amalitech-docked-utility-bar.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-docked-utility-bar",
      "readme": "# amalitech-docked-utility-bar\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The default slot to be used with `amalitech-docked-utility-item` elements."
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--docked-utility-bar-border-top-color",
          "annotation": "prop",
          "docs": "The color of the border at the top of the bar default is `#c1c4d6`"
        },
        {
          "name": "--docked-utility-bg-color",
          "annotation": "prop",
          "docs": "The background color of the bar default is `#fff`"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The default slot to be used with `amalitech-docked-utility-item` elements."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-docked-utility/docked-utility-body/amalitech-docked-utility-body.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-docked-utility-body",
      "readme": "# amalitech-docked-utility-body\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "logo - The logo to be displayed in the header."
        },
        {
          "name": "slot",
          "text": "close - The close icon to be displayed in the header."
        },
        {
          "name": "slot",
          "text": "content - The content to be displayed in the body."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name attribute should match the content attribute placed on an `amalitech-docked-utility-item` element\r\nto indicate that the body is associated with that item.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--docked-utility-body-bg-color",
          "annotation": "prop",
          "docs": "The background color of the body default is `#fff`"
        },
        {
          "name": "--docked-utility-body-border-color",
          "annotation": "prop",
          "docs": "The color of the border of the body default is `#c1c4d6`"
        },
        {
          "name": "--docked-utility-body-max-width",
          "annotation": "prop",
          "docs": "The maximum width of the body default is `25rem`"
        },
        {
          "name": "--docked-utility-body-padding",
          "annotation": "prop",
          "docs": "The padding of the body default is `1rem`"
        },
        {
          "name": "--docked-utility-body-width",
          "annotation": "prop",
          "docs": "The width of the body default is `100vw`"
        },
        {
          "name": "--docked-utility-header-border-bottom",
          "annotation": "prop",
          "docs": "The color of the border at the bottom of the header default is `#eb9c7f`"
        },
        {
          "name": "--docked-utility-header-border-bottom-width",
          "annotation": "prop",
          "docs": "The width of the border at the bottom of the header default is `0.125rem`"
        }
      ],
      "slots": [
        {
          "name": "close",
          "docs": "The close icon to be displayed in the header."
        },
        {
          "name": "content",
          "docs": "The content to be displayed in the body."
        },
        {
          "name": "logo",
          "docs": "The logo to be displayed in the header."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-docked-utility/docked-utility-item/amalitech-docked-utility-item.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-docked-utility-item",
      "readme": "# amalitech-docked-utility-item\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The default slot for any content you like to be a docked utility item."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "content",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "content",
          "reflectToAttr": false,
          "docs": "The content attribute should match the name attribute placed on an `amalitech-docked-utility-body` element\r\nto indicate that the body is associated with this item.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--docked-utility-item-active-bg - Background color for the docked utility item when active default is `$orange-100`",
          "annotation": "prop",
          "docs": ""
        },
        {
          "name": "--docked-utility-item-active-border-bottom-color - Border bottom color for the docked utility item when active default is `$orange-500`",
          "annotation": "prop",
          "docs": ""
        },
        {
          "name": "--docked-utility-item-active-border-bottom-width - Border bottom width for the docked utility item when active default is `0.3125rem`",
          "annotation": "prop",
          "docs": ""
        },
        {
          "name": "--docked-utility-item-border-bottom-width - Border bottom width for the docked utility item default is `0.3125rem`",
          "annotation": "prop",
          "docs": ""
        },
        {
          "name": "--docked-utility-item-padding - Padding for the docked utility item defaultis `1.75rem`",
          "annotation": "prop",
          "docs": ""
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The default slot for any content you like to be a docked utility item."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-input/amalitech-input.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-input",
      "readme": "# amalitech-input\r\n\r",
      "docs": "The Input component is a wrapper to the HTML input element with custom styling and additional\r\nfunctionality.",
      "docsTags": [
        {
          "name": "part",
          "text": "input-field - The main input text element."
        },
        {
          "name": "slot",
          "text": "iconLeft - Slot for an icon to be placed on the left side of the input."
        },
        {
          "name": "slot",
          "text": "start - Slot for content to be placed at the start of the input."
        },
        {
          "name": "slot",
          "text": "end - Slot for content to be placed at the end of the input."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "aTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "a-title",
          "reflectToAttr": false,
          "docs": "Title text of the input text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "anyAriaRequired",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "any-aria-required",
          "reflectToAttr": false,
          "docs": "Used to indicate that user input is required on an element before a form can be submitted.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "anyTabIndex",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "any-tab-index",
          "reflectToAttr": false,
          "docs": "Specifies tab order of the element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ariaDetailedId",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "aria-detailed-id",
          "reflectToAttr": false,
          "docs": "(optional) id or space separated list of ids of elements that provide or link to additional related information.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Used to define a string that autocomplete attribute the current element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "(optional) the input should automatically get focus when the page loads.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "counter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "counter",
          "reflectToAttr": false,
          "docs": "(optional) Input counter",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "floatLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "float-label",
          "reflectToAttr": false,
          "docs": "When enabled, the label will have floating effect on input text focus",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helperText",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "(optional) Input helper text",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputClass",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "input-class",
          "reflectToAttr": false,
          "docs": "Inline style of the element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputHolderClass",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "input-holder-class",
          "reflectToAttr": false,
          "docs": "The class of input holder element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "Identifier of the focus input to match a label defined for the component.",
          "docsTags": [],
          "default": "`input-text-${inputIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "input-style",
          "reflectToAttr": false,
          "docs": "Inline style of the input element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputWrapperClass",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "input-wrapper-class",
          "reflectToAttr": false,
          "docs": "The class of input wrapper element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the input text",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "leftIconClass",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "left-icon-class",
          "reflectToAttr": false,
          "docs": "The class of left icon wrapper element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "list",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "list",
          "reflectToAttr": false,
          "docs": "(optional) input list",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "(optional) define the numeric maximum value of input types such as month, date, time",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "max-length",
          "reflectToAttr": false,
          "docs": "Maximum number of character allows in the input field.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "(optional) defines the numeric minimum value of input types such as month, date, time",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minLength",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "min-length",
          "reflectToAttr": false,
          "docs": "(optional) Input text string min length",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the input text.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "Regular expression for input field",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Default text to display when no value in input text",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element value cannot be changed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "When present, it specifies that an input field is required.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the input field.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styles",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "styles",
          "reflectToAttr": false,
          "docs": "Inline style for the entire element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"date\" | \"datetime-local\" | \"email\" | \"hidden\" | \"month\" | \"number\" | \"password\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
          "complexType": {
            "original": "| 'email'\r\n    | 'hidden'\r\n    | 'number'\r\n    | 'password'\r\n    | 'tel'\r\n    | 'text'\r\n    | 'date'\r\n    | 'month' // example yyyy-mm\r\n    | 'week' // example yyyy-W##\r\n    | 'time' // example hh:mm\r\n    | 'datetime-local' // example yyyy-mm-ddThh:mm\r\n    | 'url'",
            "resolved": "\"date\" | \"datetime-local\" | \"email\" | \"hidden\" | \"month\" | \"number\" | \"password\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Input type",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "datetime-local",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "hidden",
              "type": "string"
            },
            {
              "value": "month",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "time",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "week",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the input text",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputRef",
          "returns": {
            "type": "Promise<HTMLInputElement | null>",
            "docs": "The input element, or null if not found."
          },
          "complexType": {
            "signature": "() => Promise<HTMLInputElement | null>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              }
            },
            "return": "Promise<HTMLInputElement | null>"
          },
          "signature": "getInputRef() => Promise<HTMLInputElement | null>",
          "parameters": [],
          "docs": "Retrieves a reference to the input element within the component.",
          "docsTags": [
            {
              "name": "returns",
              "text": "The input element, or null if not found."
            },
            {
              "name": "example",
              "text": "const inputElement = await myComponent.getInputRef();\r\nif (inputElement) {\r\n  // Do something with the input element\r\n  inputElement.focus();\r\n}"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "valueChange",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when value of input text changes",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--input-BorderRadius",
          "annotation": "prop",
          "docs": "The border radius of the input field"
        },
        {
          "name": "--inputBgColor",
          "annotation": "prop",
          "docs": "The background color of the input field."
        },
        {
          "name": "--inputBorder",
          "annotation": "prop",
          "docs": "The border of the input field."
        },
        {
          "name": "--inputComponentWidth",
          "annotation": "prop",
          "docs": "The width of the whole input component."
        },
        {
          "name": "--inputErrorBorder",
          "annotation": "prop",
          "docs": "The border of the input field in case of an error."
        },
        {
          "name": "--inputFilledBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled."
        },
        {
          "name": "--inputFilledFocusBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled and focused."
        },
        {
          "name": "--inputFilledHoverBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled and hovered."
        },
        {
          "name": "--inputFocusBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field on focus"
        },
        {
          "name": "--inputHelperTextColor",
          "annotation": "prop",
          "docs": "The color of the helper text within the input field"
        },
        {
          "name": "--inputHelperTextSize",
          "annotation": "prop",
          "docs": "The font size of the helper text within the input field"
        },
        {
          "name": "--inputHoverBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field on hover"
        },
        {
          "name": "--inputIconColor",
          "annotation": "prop",
          "docs": "The color of icons within the input field"
        },
        {
          "name": "--inputLabelColor",
          "annotation": "prop",
          "docs": "The color of label within the input field"
        },
        {
          "name": "--inputLabelFontSize",
          "annotation": "prop",
          "docs": "The font size of the label within the input field"
        },
        {
          "name": "--inputLabelFontWeight",
          "annotation": "prop",
          "docs": "The font weight of the label within the input field"
        },
        {
          "name": "--inputPadding",
          "annotation": "prop",
          "docs": "The padding of the input field."
        },
        {
          "name": "--inputPlaceholderTextColor",
          "annotation": "prop",
          "docs": "The text color of the input field placeholder."
        },
        {
          "name": "--inputTextColor",
          "annotation": "prop",
          "docs": "The text color of the input field"
        },
        {
          "name": "--inputTransition",
          "annotation": "prop",
          "docs": "The transition effect for the input field, involving border color and box shadow, using the --transitionDuration variable."
        },
        {
          "name": "--inputWidth",
          "annotation": "prop",
          "docs": "The width of the input field."
        }
      ],
      "slots": [
        {
          "name": "end",
          "docs": "Slot for content to be placed at the end of the input."
        },
        {
          "name": "iconLeft",
          "docs": "Slot for an icon to be placed on the left side of the input."
        },
        {
          "name": "start",
          "docs": "Slot for content to be placed at the start of the input."
        }
      ],
      "parts": [
        {
          "name": "input-field",
          "docs": "The main input text element."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-map/amalitech-map.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-map",
      "readme": "# amalitech-map\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "height",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "height",
          "reflectToAttr": false,
          "docs": "Sets the height of the map",
          "docsTags": [],
          "default": "'600px'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideNearByList",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-near-by-list",
          "reflectToAttr": false,
          "docs": "If set to true, hides the list of nearby landmarks",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconUrl",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-url",
          "reflectToAttr": false,
          "docs": "Specifies the icon url",
          "docsTags": [],
          "default": "'https://i.ibb.co/LYT961S/352521-location-on-icon.png'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "latitude",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "latitude",
          "reflectToAttr": false,
          "docs": "Specifies the latitude value",
          "docsTags": [],
          "default": "-0.1514209",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "longitude",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "longitude",
          "reflectToAttr": false,
          "docs": "Specifies the longitude value",
          "docsTags": [],
          "default": "5.6339642",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Adds a name to be shown in the popup",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "Sets the width of the map",
          "docsTags": [],
          "default": "'100%'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoom",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "zoom",
          "reflectToAttr": false,
          "docs": "Sets the zoom level of the map",
          "docsTags": [],
          "default": "19",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "addMarker",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(lat: number, long: number, name: string, iconUrl?: string, zoom?: number) => Promise<void>",
            "parameters": [
              {
                "name": "lat",
                "type": "number",
                "docs": ""
              },
              {
                "name": "long",
                "type": "number",
                "docs": ", name, iconUrl, zoom}"
              },
              {
                "name": "name",
                "type": "string",
                "docs": ""
              },
              {
                "name": "iconUrl",
                "type": "string",
                "docs": ""
              },
              {
                "name": "zoom",
                "type": "number",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "addMarker(lat: number, long: number, name: string, iconUrl?: string, zoom?: number) => Promise<void>",
          "parameters": [
            {
              "name": "lat",
              "type": "number",
              "docs": ""
            },
            {
              "name": "long",
              "type": "number",
              "docs": ", name, iconUrl, zoom}"
            },
            {
              "name": "name",
              "type": "string",
              "docs": ""
            },
            {
              "name": "iconUrl",
              "type": "string",
              "docs": ""
            },
            {
              "name": "zoom",
              "type": "number",
              "docs": ""
            }
          ],
          "docs": "Adds a marker to the map",
          "docsTags": [
            {
              "name": "param",
              "text": "long , name, iconUrl, zoom}"
            },
            {
              "name": "see",
              "text": "https://leafletjs.com/reference.html#marker"
            }
          ]
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-modal/amalitech-modal.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-modal",
      "readme": "# amalitech-modal\r\n\r",
      "docs": "The modal component is a custom element used to display content in a layer above the app.\r\nit comes with default text for cancel and confirm buttons but can be customized with",
      "docsTags": [
        {
          "name": "prop",
          "text": "confirmText"
        },
        {
          "name": "prop",
          "text": "cancelText"
        },
        {
          "name": "part",
          "text": "cancel-button"
        },
        {
          "name": "part",
          "text": "confirm-button"
        },
        {
          "name": "slot",
          "text": "header - The header text of the modal"
        },
        {
          "name": "slot",
          "text": "- The single default slot for modal content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "cancelText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "cancel-text",
          "reflectToAttr": true,
          "docs": "Text to show for cancel",
          "docsTags": [],
          "default": "'cancel'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeButtonType",
          "type": "\"arms\" | \"rounded\" | \"square\" | \"x\" | \"x-rounded\"",
          "complexType": {
            "original": "'arms' | 'x' | 'x-rounded' | 'rounded' | 'square'",
            "resolved": "\"arms\" | \"rounded\" | \"square\" | \"x\" | \"x-rounded\"",
            "references": {}
          },
          "mutable": false,
          "attr": "close-button-type",
          "reflectToAttr": true,
          "docs": "The customization for close button",
          "docsTags": [],
          "default": "'arms'",
          "values": [
            {
              "value": "arms",
              "type": "string"
            },
            {
              "value": "rounded",
              "type": "string"
            },
            {
              "value": "square",
              "type": "string"
            },
            {
              "value": "x",
              "type": "string"
            },
            {
              "value": "x-rounded",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "confirmText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "confirm-text",
          "reflectToAttr": true,
          "docs": "Text to show for confirmation",
          "docsTags": [],
          "default": "'confirm'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "confirmation",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "confirmation",
          "reflectToAttr": true,
          "docs": "Whether to show the confirmation only variant",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "scrollable",
          "reflectToAttr": true,
          "docs": "Make the modal scrollable/full screen",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "visible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "visible",
          "reflectToAttr": true,
          "docs": "Show or hide modal",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "closeModal",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "closeModal() => Promise<void>",
          "parameters": [],
          "docs": "Closes the modal",
          "docsTags": []
        },
        {
          "name": "openModal",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "openModal() => Promise<void>",
          "parameters": [],
          "docs": "Opens the modal",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "amalitechCancel",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event is emmitted when user clicks on cancel button or close button",
          "docsTags": []
        },
        {
          "event": "amalitechConfirm",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event is emmited when a user clicks on confirm button",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--cancel-button-background",
          "annotation": "prop",
          "docs": "The background color of the cancel button"
        },
        {
          "name": "--cancel-button-color",
          "annotation": "prop",
          "docs": "The text color of the cancel button"
        },
        {
          "name": "--confirm-button-background",
          "annotation": "prop",
          "docs": "The background color of the confirm button"
        },
        {
          "name": "--confirm-button-color",
          "annotation": "prop",
          "docs": "The text color of the confirm button"
        },
        {
          "name": "--modal-background",
          "annotation": "prop",
          "docs": "The background color of the modal"
        },
        {
          "name": "--modal-header-color",
          "annotation": "prop",
          "docs": "The text color of the modal header"
        },
        {
          "name": "--modal-header-font-size",
          "annotation": "prop",
          "docs": "The font size of the modal header"
        },
        {
          "name": "--modal-top-after",
          "annotation": "prop",
          "docs": "The top position of the modal after it is visible"
        },
        {
          "name": "--modal-top-before",
          "annotation": "prop",
          "docs": "The top position of the modal before it is visible"
        },
        {
          "name": "--modal-width",
          "annotation": "prop",
          "docs": "The width of the modal"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The single default slot for modal content"
        },
        {
          "name": "header",
          "docs": "The header text of the modal"
        }
      ],
      "parts": [
        {
          "name": "cancel-button",
          "docs": ""
        },
        {
          "name": "confirm-button",
          "docs": ""
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-navigation/amalitech-nav-item/amalitech-nav-item.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-nav-item",
      "readme": "# amalitech-nav-item\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Whether the nav item is active or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether the nav item is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "switch",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": false,
          "docs": "Event emitted when the nav item is clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--nav-item-active-color",
          "annotation": "prop",
          "docs": "The color of the nav item when active"
        },
        {
          "name": "--nav-item-active-font-size",
          "annotation": "prop",
          "docs": "The font size of the nav item when active"
        },
        {
          "name": "--nav-item-font-size",
          "annotation": "prop",
          "docs": "The font size of the nav item"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-navigation/amalitech-nav-mobile/amalitech-nav-mobile.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-nav-mobile",
      "readme": "# amalitech-nav-mobile\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "align",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "align",
          "reflectToAttr": false,
          "docs": "The alignment of the mobile dropdown trigger icon. Defaults to `left`",
          "docsTags": [],
          "default": "'right'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--nav-dropdown-bg-color",
          "annotation": "prop",
          "docs": "The background color of the dropdown"
        },
        {
          "name": "--nav-menu-close-color",
          "annotation": "prop",
          "docs": "The color of the close icon"
        },
        {
          "name": "--nav-menu-icon-color",
          "annotation": "prop",
          "docs": "The color of the menu icon"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "amalitech-navbar"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "amalitech-navbar": [
          "amalitech-nav-mobile"
        ]
      }
    },
    {
      "filePath": "src/components/amalitech-navigation/amalitech-navbar/amalitech-navbar.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-navbar",
      "readme": "# amalitech-navbar\r\n\r\n\r\n\r",
      "docs": "This navbar component is designed to be used with child `amalitech-nav-item` components.",
      "docsTags": [
        {
          "name": "slot",
          "text": "logo - The logo of the navbar"
        },
        {
          "name": "slot",
          "text": "search - The search bar"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "layout",
          "type": "\"nav-items-center\" | \"nav-items-left\" | \"nav-items-right\"",
          "complexType": {
            "original": "'nav-items-center' | 'nav-items-right' | 'nav-items-left'",
            "resolved": "\"nav-items-center\" | \"nav-items-left\" | \"nav-items-right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": false,
          "docs": "The layout of the navbar. Defaults to `1` aka: \"logo | nav | search\"",
          "docsTags": [],
          "default": "'nav-items-center'",
          "values": [
            {
              "value": "nav-items-center",
              "type": "string"
            },
            {
              "value": "nav-items-left",
              "type": "string"
            },
            {
              "value": "nav-items-right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mobileIconAlign",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "mobile-icon-align",
          "reflectToAttr": false,
          "docs": "The alignment of the mobile dropdown trigger icon. Defaults to `right`",
          "docsTags": [],
          "default": "'right'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "switch",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--nav-bg-color",
          "annotation": "prop",
          "docs": "The background color of the navbar"
        },
        {
          "name": "--nav-font-family",
          "annotation": "prop",
          "docs": "The font size of the nav item"
        },
        {
          "name": "--nav-item-gap",
          "annotation": "prop",
          "docs": "The space between nav-item elements when active"
        }
      ],
      "slots": [
        {
          "name": "logo",
          "docs": "The logo of the navbar"
        },
        {
          "name": "search",
          "docs": "The search bar"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "amalitech-nav-mobile"
      ],
      "dependencyGraph": {
        "amalitech-navbar": [
          "amalitech-nav-mobile"
        ]
      }
    },
    {
      "filePath": "src/components/amalitech-pagination/amalitech-pagination.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-pagination",
      "readme": "# amalitech-pagination\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "limitNumber",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "limit-number",
          "reflectToAttr": false,
          "docs": "The number of items per page",
          "docsTags": [],
          "default": "10",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pageNumber",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "page-number",
          "reflectToAttr": false,
          "docs": "The current page number",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "siblings",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "siblings",
          "reflectToAttr": false,
          "docs": "The number of siblings to show in +2 increments before ellipses. eg: `1 = 5, 2 = 7, 3 = 9`",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the pagination component",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalItems",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "total-items",
          "reflectToAttr": false,
          "docs": "The total number of items in the data set",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalPagesCount",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "total-pages-count",
          "reflectToAttr": false,
          "docs": "(optional) The total number of pages if you do not want the component to handle\r\ncalculating the total pages based on the total items and limit number",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "amalitechPageChange",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "This event is emmitted with the selected page number when the page changes",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--pagination-active-bg",
          "annotation": "prop",
          "docs": "The background color of the pagination when active default is `$orange-100`"
        },
        {
          "name": "--pagination-active-color",
          "annotation": "prop",
          "docs": "The text color of the pagination when active default is `$orange-500`"
        },
        {
          "name": "--pagination-font-size",
          "annotation": "prop",
          "docs": "The font size of the pagination default is `1rem`"
        },
        {
          "name": "--pagination-gap",
          "annotation": "prop",
          "docs": "The gap between page items default is `0.375rem`"
        },
        {
          "name": "--pagination-item-border-radius",
          "annotation": "prop",
          "docs": "The border radius of the pagination item default is `0.375rem`"
        },
        {
          "name": "--pagination-item-color",
          "annotation": "prop",
          "docs": "The text color of the pagination item default is `$neutral-400`"
        },
        {
          "name": "--pagination-item-padding",
          "annotation": "prop",
          "docs": "The padding of the pagination item default is `0.5rem 1rem`"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-progress/amalitech-progress.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-progress",
      "readme": "# amalitech-progress\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currentValue",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "current-value",
          "reflectToAttr": true,
          "docs": "Only present and required if the value is not indeterminate.\r\nSet to a decimal value between 0, or valuemin if present,\r\nand max-value indicating the current value of the progress bar.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "indeterminate",
          "reflectToAttr": false,
          "docs": "Used to show indeterminate or pending progress state.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labeledBy",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "labeled-by",
          "reflectToAttr": true,
          "docs": "Defines the string value or identifies the element (or elements)\r\nthat label the progressbar element providing an accessible name.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxValue",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-value",
          "reflectToAttr": true,
          "docs": "Set to a decimal value representing the maximum value, and greater\r\nthan min-value. If not present, the default value is 100.",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minValue",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min-value",
          "reflectToAttr": true,
          "docs": "Set to a decimal value representing the minimum value, and less\r\nthan max-value. If not present, the default value is 0.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "steps",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "steps",
          "reflectToAttr": false,
          "docs": "Divides progress bar in multiple progress steps.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valueText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value-text",
          "reflectToAttr": true,
          "docs": "Assistive technologies often present the value of current-value\r\nas a percentage. If this would not be accurate use this property\r\nto make the progress bar value understandable.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-progress-bar/amalitech-progress-bar.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-progress-bar",
      "readme": "# amalitech-progress-bar\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "helperText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "Provide a hint to the user of what's happening.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-label",
          "reflectToAttr": false,
          "docs": "Hides the label.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideValue",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-value",
          "reflectToAttr": false,
          "docs": "Hides the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "indeterminate",
          "reflectToAttr": false,
          "docs": "If `true`, the progress bar will be displayed as an indeterminate progress bar.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "A label describing the progress bar.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maximumValue",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maximum-value",
          "reflectToAttr": false,
          "docs": "The maximum value.",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minimumValue",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minimum-value",
          "reflectToAttr": false,
          "docs": "The minimum value.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\"",
          "complexType": {
            "original": "'sm' | 'md' | 'lg'",
            "resolved": "\"lg\" | \"md\" | \"sm\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "\r\nPossible values are: `\"sm\"`, `\"lg\"` and `\"md\"` in pixel. Defaults to `\"sm\"`.",
          "docsTags": [],
          "default": "'sm'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"active\" | \"error\" | \"success\"",
          "complexType": {
            "original": "'active' | 'success' | 'error'",
            "resolved": "\"active\" | \"error\" | \"success\"",
            "references": {}
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": false,
          "docs": "The status of the progress bar.",
          "docsTags": [],
          "default": "'active'",
          "values": [
            {
              "value": "active",
              "type": "string"
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The current value.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-progress-ring/amalitech-progress-ring.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-progress-ring",
      "readme": "# amalitech-progress-ring\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "indeterminate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "indeterminate",
          "reflectToAttr": false,
          "docs": "If the progress ring should be indeterminate.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outlineColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "outline-color",
          "reflectToAttr": false,
          "docs": "The color of the background of the progress ring, in any CSS valid format.",
          "docsTags": [],
          "default": "color.neutral200",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "progress",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "progress",
          "reflectToAttr": false,
          "docs": "The current progress value in percentage.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "progressColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "progress-color",
          "reflectToAttr": false,
          "docs": "The color of the progress ring, in any CSS valid format.",
          "docsTags": [],
          "default": "color.orange500",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "progressText",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "progress-text",
          "reflectToAttr": false,
          "docs": "The text to display inside the progress ring.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "radius",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "radius",
          "reflectToAttr": false,
          "docs": "The radius of the progress ring in px.",
          "docsTags": [],
          "default": "56",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stroke",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "stroke",
          "reflectToAttr": false,
          "docs": "The stroke width of the progress ring in px.",
          "docsTags": [],
          "default": "6",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--progress-ring-indeterminate-duration",
          "annotation": "prop",
          "docs": "Duration of the indeterminate progress ring animation default is `2s`"
        },
        {
          "name": "--progress-ring-indeterminate-timing-function",
          "annotation": "prop",
          "docs": "Timing function of the indeterminate progress ring animation default is `cubic-bezier(0.5, 0, 0.5, 1)`"
        },
        {
          "name": "--progress-ring-text-color",
          "annotation": "prop",
          "docs": "Color of the progress ring text default is `#101840`"
        },
        {
          "name": "--progress-ring-text-weight",
          "annotation": "prop",
          "docs": "Font weight of the progress ring text default is `500`"
        },
        {
          "name": "--progress-ring-transition-duration",
          "annotation": "prop",
          "docs": "Duration of the progress ring transition default is `0.35s`"
        },
        {
          "name": "--progress-text-size",
          "annotation": "prop",
          "docs": "Font size of the progress ring text default is `1.25rem`"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-radio/amalitech-radio-button/amalitech-radio-button.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-radio-button",
      "readme": "# amalitech-radio-button\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "anyTabIndex",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "any-tab-index",
          "reflectToAttr": false,
          "docs": "Index of the element in tabbing order",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "doubleBorder",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "double-border",
          "reflectToAttr": false,
          "docs": "If `true`, the radio button has a double border.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "Identifier of the focus input to match a label defined for the component.",
          "docsTags": [],
          "default": "`amalitech-rb-${radiobuttonIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the radiobutton.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelStyleClass",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "label-style-class",
          "reflectToAttr": false,
          "docs": "Style class of the label.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "style-class",
          "reflectToAttr": false,
          "docs": "Style class of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any | null",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "the value of the radio.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(event: FocusEvent) => Promise<void>",
            "parameters": [
              {
                "name": "event",
                "type": "FocusEvent",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "FocusEvent": {
                "location": "global",
                "id": "global::FocusEvent"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus(event: FocusEvent) => Promise<void>",
          "parameters": [
            {
              "name": "event",
              "type": "FocusEvent",
              "docs": ""
            }
          ],
          "docs": "Applies focus.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "aOnBlur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when the radio button loses focus.",
          "docsTags": []
        },
        {
          "event": "aOnFocus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when the radio button receives focus.",
          "docsTags": []
        },
        {
          "event": "aOnSelect",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke on radio button select.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-radio/amalitech-radio-group/amalitech-radio-group.tsx",
      "encapsulation": "none",
      "tag": "amalitech-radio-group",
      "readme": "# amalitech-radio-group\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any | null",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "the value of the radio group.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "valueChange",
          "detail": "RadioGroupChangeEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "RadioGroupChangeEventDetail",
            "resolved": "RadioGroupChangeEventDetail<any>",
            "references": {
              "RadioGroupChangeEventDetail": {
                "location": "import",
                "path": "./radio-group-inteface",
                "id": "src/components/amalitech-radio/amalitech-radio-group/radio-group-inteface.ts::RadioGroupChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-select/amalitech-select/amalitech-select.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-select",
      "readme": "# amalitech-select\r\n\r",
      "docs": "The Select component is a custom element designed to be used with child select-option elements.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- This defualt slot is deignated for use with select-option elements."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the select component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label of the select component eg: 'Select a fruit' or 'Select a car'",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "If true, the user can select multiple options at once.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Toggles the open state of the dropdown",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If true, the select component will be required",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "scrollable",
          "reflectToAttr": false,
          "docs": "If true, the dropdown will be scrollable",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedStyle",
          "type": "\"checkRounded\" | \"checkmark\" | \"dot\"",
          "complexType": {
            "original": "'checkmark' | 'checkRounded' | 'dot'",
            "resolved": "\"checkRounded\" | \"checkmark\" | \"dot\"",
            "references": {}
          },
          "mutable": false,
          "attr": "selected-style",
          "reflectToAttr": true,
          "docs": "The style to be applied when items are checked",
          "docsTags": [],
          "default": "'checkmark'",
          "values": [
            {
              "value": "checkRounded",
              "type": "string"
            },
            {
              "value": "checkmark",
              "type": "string"
            },
            {
              "value": "dot",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "clear",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "clear() => Promise<void>",
          "parameters": [],
          "docs": "This method clears all selected options",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "amalitechChange",
          "detail": "{ [x: string]: string | string[]; }",
          "bubbles": true,
          "complexType": {
            "original": "Record<string, string | string[]>",
            "resolved": "{ [x: string]: string | string[]; }",
            "references": {
              "Record": {
                "location": "global",
                "id": "global::Record"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "This event emmits the value of the selected option or an array of values if option is multiple",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "selection",
          "capture": false,
          "passive": false
        },
        {
          "event": "deselection",
          "capture": false,
          "passive": false
        },
        {
          "event": "multiDeselection",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--select-dropdown-border-color",
          "annotation": "prop",
          "docs": "The border color of the select dropdown default is `$neutral-500`"
        },
        {
          "name": "--select-dropdown-border-width",
          "annotation": "prop",
          "docs": "The border width of the select dropdown default is `1px`"
        },
        {
          "name": "--select-dropdown-height",
          "annotation": "prop",
          "docs": "The height of the select dropdown, useful when the select is scrollable default is `10rem`"
        },
        {
          "name": "--select-dropdown-padding",
          "annotation": "prop",
          "docs": "The padding of the select dropdown default is `0.35rem`"
        },
        {
          "name": "--select-dropdown-radius",
          "annotation": "prop",
          "docs": "The border radius of the select dropdown default is `0.35rem`"
        },
        {
          "name": "--select-font-family",
          "annotation": "prop",
          "docs": "The font family of the select default is `--amalitech-font-family-sans`"
        },
        {
          "name": "--select-label-border-color",
          "annotation": "prop",
          "docs": "The border color of the select label default is `$neutral-500`"
        },
        {
          "name": "--select-label-border-width",
          "annotation": "prop",
          "docs": "The border width of the select label default is `1px`"
        },
        {
          "name": "--select-label-color",
          "annotation": "prop",
          "docs": "The color of the select label default is `--amalitech-color-dark`"
        },
        {
          "name": "--select-label-font-size",
          "annotation": "prop",
          "docs": "The font size of the select label default is `0.875rem`"
        },
        {
          "name": "--select-label-gap",
          "annotation": "prop",
          "docs": "The gap between the select label default is `1rem`"
        },
        {
          "name": "--select-label-padding",
          "annotation": "prop",
          "docs": "The padding of the select label default is `0.5rem 0.75rem`"
        },
        {
          "name": "--select-label-radius",
          "annotation": "prop",
          "docs": "The border radius of the select label default is `0.35rem`"
        },
        {
          "name": "--select-label-weight",
          "annotation": "prop",
          "docs": "The font weight of the select label default is `500`"
        },
        {
          "name": "--select-width",
          "annotation": "prop",
          "docs": "The width of the select default is `174px`"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "This defualt slot is deignated for use with select-option elements."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "amalitech-select-multiple",
        "amalitech-select-single"
      ],
      "dependencyGraph": {
        "amalitech-select": [
          "amalitech-select-multiple",
          "amalitech-select-single"
        ]
      }
    },
    {
      "filePath": "src/components/amalitech-select/amalitech-select[multiple]/amalitech-select-multiple.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-select-multiple",
      "readme": "# amalitech-select-multiple\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If true, the user cannot interact with the select component.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label of the select component eg: 'Select a fruit' or 'Select a car'",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Toggles the open state of the dropdown",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If true, the select component will be required",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "scrollable",
          "reflectToAttr": false,
          "docs": "If true, the dropdown will be scrollable",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"multiple\" | \"single\"",
          "complexType": {
            "original": "'single' | 'multiple'",
            "resolved": "\"multiple\" | \"single\"",
            "references": {}
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "The state of the select component eg: 'single' or 'multiple'",
          "docsTags": [],
          "default": "'multiple'",
          "values": [
            {
              "value": "multiple",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "multiDeselection",
          "detail": "{ value: string; textContent: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{\r\n    value: string;\r\n    textContent: string;\r\n  }",
            "resolved": "{ value: string; textContent: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "This event is triggered when a selection is removed",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "selection",
          "capture": false,
          "passive": false
        },
        {
          "event": "deselection",
          "capture": false,
          "passive": false
        },
        {
          "event": "clearEvent",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "amalitech-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "amalitech-select": [
          "amalitech-select-multiple"
        ]
      }
    },
    {
      "filePath": "src/components/amalitech-select/amalitech-select-option/amalitech-select-option.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-select-option",
      "readme": "# amalitech-select-option\r\n\r",
      "docs": "The select option component is designed to be nested within a select component.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the option",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "If true, the option is selected",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedStyle",
          "type": "\"checkRounded\" | \"checkmark\" | \"dot\"",
          "complexType": {
            "original": "'checkmark' | 'checkRounded' | 'dot'",
            "resolved": "\"checkRounded\" | \"checkmark\" | \"dot\"",
            "references": {}
          },
          "mutable": false,
          "attr": "selected-style",
          "reflectToAttr": true,
          "docs": "The style to be applied when items are checked",
          "docsTags": [],
          "default": "'checkmark'",
          "values": [
            {
              "value": "checkRounded",
              "type": "string"
            },
            {
              "value": "checkmark",
              "type": "string"
            },
            {
              "value": "dot",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The value of the option",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "clear",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "clear() => Promise<void>",
          "parameters": [],
          "docs": "Clears the selected state of the option",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "clearEvent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": false,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "deselection",
          "detail": "{ value: string; textContent: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{\r\n    value: string;\r\n    textContent: string;\r\n  }",
            "resolved": "{ value: string; textContent: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": false,
          "docs": "This event is triggered when a selection is removed",
          "docsTags": []
        },
        {
          "event": "selection",
          "detail": "{ value: string; textContent: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{\r\n    value: string;\r\n    textContent: string;\r\n  }",
            "resolved": "{ value: string; textContent: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": false,
          "docs": "This event is triggered when a selection is made",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--select-option-font-size",
          "annotation": "prop",
          "docs": "The font size of the select option default is `0.875rem`"
        },
        {
          "name": "--select-option-padding",
          "annotation": "prop",
          "docs": "The padding of the select option default is `0.5rem 0.75rem`"
        },
        {
          "name": "--select-option-radius",
          "annotation": "prop",
          "docs": "The border radius of the select option default is `0.35rem`"
        },
        {
          "name": "--select-option-weight",
          "annotation": "prop",
          "docs": "The font weight of the select option default is `500`"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-select/amalitech-select[single]/amalitech-select-single.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-select-single",
      "readme": "# amalitech-select-single\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If true, the user cannot interact with the select component.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label of the select component eg: 'Select a fruit' or 'Select a car'",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Toggles the open state of the dropdown",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If true, the select component will be required",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "scrollable",
          "reflectToAttr": false,
          "docs": "If true, the dropdown will be scrollable",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"multiple\" | \"single\"",
          "complexType": {
            "original": "'single' | 'multiple'",
            "resolved": "\"multiple\" | \"single\"",
            "references": {}
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "The state of the select component eg: 'single' or 'multiple'",
          "docsTags": [],
          "default": "'single'",
          "values": [
            {
              "value": "multiple",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "selection",
          "capture": false,
          "passive": false
        },
        {
          "event": "deselection",
          "capture": false,
          "passive": false
        },
        {
          "event": "clearEvent",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "amalitech-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "amalitech-select": [
          "amalitech-select-single"
        ]
      }
    },
    {
      "filePath": "src/components/amalitech-snackbar/amalitech-snackbar.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-snackbar",
      "readme": "# amalitech-design-system\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autoClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "auto-close",
          "reflectToAttr": false,
          "docs": "Auto Close\r\nEnables the auto close functionality",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "callToActionText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "call-to-action-text",
          "reflectToAttr": true,
          "docs": "Call To Action Text\r\nSets the call-to-action text",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeSecs",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "close-secs",
          "reflectToAttr": false,
          "docs": "Sets the duration before the snackbar closes",
          "docsTags": [],
          "default": "10",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closeable",
          "reflectToAttr": false,
          "docs": "Closeable\r\nShows a close button if true",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "href attribute\r\nSets the url of the snackbar",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rounded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "rounded",
          "reflectToAttr": false,
          "docs": "Rounded\r\nSets the border radius of the snackbar to round or square",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "snackbarText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "snackbar-text",
          "reflectToAttr": true,
          "docs": "Snackbar text\r\nSets the Snackbar text",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "target attribute\r\nspecifies how to open the url of the snackbar",
          "docsTags": [],
          "default": "'_blank'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "closed",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "This event is emitted when the close button is clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--background-color",
          "annotation": "prop",
          "docs": "Background color of the alert"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "Text color of the alert"
        },
        {
          "name": "--font-family",
          "annotation": "prop",
          "docs": "Font family of the alert text"
        },
        {
          "name": "--font-size",
          "annotation": "prop",
          "docs": "Font size of the alert text"
        },
        {
          "name": "--font-weight",
          "annotation": "prop",
          "docs": "Font weight of the alert text"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "Padding bottom of the alert"
        },
        {
          "name": "--padding-left",
          "annotation": "prop",
          "docs": "Padding left of the alert"
        },
        {
          "name": "--padding-right",
          "annotation": "prop",
          "docs": "Padding right of the alert"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "Padding top of the alert"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-star-rating/amalitech-star-rating.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-star-rating",
      "readme": "# amalitech-star-rating\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "If true, the star rating will show a variant that animates on render",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "count",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "count",
          "reflectToAttr": false,
          "docs": "The number of stars to display",
          "docsTags": [],
          "default": "5",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Indicates the disabled state of the component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hoverDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hover-disabled",
          "reflectToAttr": false,
          "docs": "If true, the user cannot hover over the star rating",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If true, the user cannot interact with the star rating",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the star rating",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "strokeColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "stroke-color",
          "reflectToAttr": false,
          "docs": "The color of the star rating stroke, default is `#474d66`",
          "docsTags": [],
          "default": "color.neutral600",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the star rating",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "amalitechRatingChange",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "The event emmitted when the star rating is changed or a selection is made",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--star-rating-active",
          "annotation": "prop",
          "docs": "The color of the star when active default is #dd5928"
        },
        {
          "name": "--star-rating-disabled",
          "annotation": "prop",
          "docs": "The color of the star when disabled default is #c1c4d6"
        },
        {
          "name": "--star-rating-gap",
          "annotation": "prop",
          "docs": "The gap between the stars default is 0"
        },
        {
          "name": "--star-rating-transition-duration",
          "annotation": "prop",
          "docs": "The transition duration of the star rating default is 0.3s"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-switch/amalitech-switch.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-switch",
      "readme": "# amalitech-switch\r\n\r\n\r\n\r",
      "docs": "The switch component is a wrapper around the native checkbox element.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "The whether the component is checked or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "The whether the component is disabled or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The name attribute of the underlying checkbox element",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The size of the switch component",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "switchId",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "switch-id",
          "reflectToAttr": true,
          "docs": "The id of the underlying checkbox element",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The value attribute of the underlying checkbox element",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "amalitechSwitchChange",
          "detail": "{ [x: string]: string | boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "Record<string, string | boolean>",
            "resolved": "{ [x: string]: string | boolean; }",
            "references": {
              "Record": {
                "location": "global",
                "id": "global::Record"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "The event that is emitted when the component is clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--amalitech-switch-checked-bg",
          "annotation": "prop",
          "docs": "Background color of the switch when checked, default is `#dd5928`"
        },
        {
          "name": "--amalitech-switch-knob-bg",
          "annotation": "prop",
          "docs": "Background color of the knob, default is `#fff`"
        },
        {
          "name": "--amalitech-switch-unchecked-bg",
          "annotation": "prop",
          "docs": "Background color of the switch when unchecked, default is `#d3d3d3`"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-tab/amalitech-tab/amalitech-tab.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-tab",
      "readme": "# amalitech-tab\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activeIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "active-index",
          "reflectToAttr": false,
          "docs": "Index of the active tab to change selected tab programmatically.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "style-class",
          "reflectToAttr": false,
          "docs": "Style class of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-tab/amalitech-tab-panel/amalitech-tab-panel.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-tab-panel",
      "readme": "# amalitech-tab-panel\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, tab cannot be activated.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "Defines if tab is active.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabName",
          "type": "null | string",
          "complexType": {
            "original": "string | null",
            "resolved": "null | string",
            "references": {}
          },
          "mutable": false,
          "attr": "tab-name",
          "reflectToAttr": false,
          "docs": "Title of the tabPanel.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-time-picker/amalitech-time-picker.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-time-picker",
      "readme": "# amalitech-time-picker\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label of the time picker",
          "docsTags": [],
          "default": "'Pick a Time'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The maximum time that can be selected in the format `00:00`",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "meridian",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "meridian",
          "reflectToAttr": false,
          "docs": "If true, time picker will be in 12 hour format",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The minimum time that can be selected in the format `00:00`",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outputFormat",
          "type": "\"date\" | \"string\"",
          "complexType": {
            "original": "'string' | 'date'",
            "resolved": "\"date\" | \"string\"",
            "references": {}
          },
          "mutable": false,
          "attr": "output-format",
          "reflectToAttr": false,
          "docs": "The format of the time picker event detail",
          "docsTags": [],
          "default": "'string'",
          "values": [
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "string",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If true, the time picker will show a required state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "seconds",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "seconds",
          "reflectToAttr": false,
          "docs": "If true, time picker will show seconds",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the time picker",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The current value of the time picker in the format `00:00`",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes the time picker dropdown",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Opens the time picker dropdown",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "amalitechTimeChange",
          "detail": "Date | { time?: string | undefined; meridian?: string | undefined; hour?: string | undefined; minute?: string | undefined; second?: string | undefined; }",
          "bubbles": true,
          "complexType": {
            "original": "Partial<Record<'time' | 'hour' | 'minute' | 'meridian' | 'second', string>> | Date",
            "resolved": "Date | { time?: string | undefined; meridian?: string | undefined; hour?: string | undefined; minute?: string | undefined; second?: string | undefined; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "Record": {
                "location": "global",
                "id": "global::Record"
              },
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "This event emmits the value of the selected time in the format {time: '00:00 AM', hour: '00', minute: '00', meridian: 'AM'}",
          "docsTags": []
        },
        {
          "event": "amalitechTimeClear",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "This event is emitted when the time picker value is cleared",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--time-picker-active-bg",
          "annotation": "prop",
          "docs": "The background color of the active time default is `#e47453`"
        },
        {
          "name": "--time-picker-active-color",
          "annotation": "prop",
          "docs": "The text color of the active time default is `#ffffff`"
        },
        {
          "name": "--time-picker-bg-color",
          "annotation": "prop",
          "docs": "The background color of the time dropdown default is `#ffffff`"
        },
        {
          "name": "--time-picker-color",
          "annotation": "prop",
          "docs": "The color of the time picker default is `#8f95b2`"
        },
        {
          "name": "--time-picker-disabled-color",
          "annotation": "prop",
          "docs": "The text color of the disabled time default is `#8f95b2`"
        },
        {
          "name": "--time-picker-dropdown-box-shadow",
          "annotation": "prop",
          "docs": "The box shadow of the time picker dropdown default is `0 6px 16px 0 rgba(0, 0, 0, 0.08), 0 3px 6px -4px rgba(0, 0, 0, 0.12)`"
        },
        {
          "name": "--time-picker-focus-color",
          "annotation": "prop",
          "docs": "The focus color of the time picker default is `#e47453`"
        },
        {
          "name": "--time-picker-font-family",
          "annotation": "prop",
          "docs": "The font family of the time picker default is `Work Sans`"
        },
        {
          "name": "--time-picker-footer-now-button-padding",
          "annotation": "prop",
          "docs": "The padding of the time picker footer now button default is `0.5rem 0.625rem`"
        },
        {
          "name": "--time-picker-footer-ok-button-br",
          "annotation": "prop",
          "docs": "The border radius of the time picker footer ok button default is `0.4125rem`"
        },
        {
          "name": "--time-picker-footer-ok-button-padding",
          "annotation": "prop",
          "docs": "The padding of the time picker footer ok button default is `0.35rem 0.625rem`"
        },
        {
          "name": "--time-picker-footer-padding",
          "annotation": "prop",
          "docs": "The padding of the time picker footer default is `0.5rem 0.75rem`"
        },
        {
          "name": "--time-picker-panel-display",
          "annotation": "prop",
          "docs": "The display of the time picker panel default is `flex`"
        },
        {
          "name": "--time-picker-panel-opacity",
          "annotation": "prop",
          "docs": "The opacity of the time picker panel default is `1`"
        },
        {
          "name": "--time-picker-transition-duration",
          "annotation": "prop",
          "docs": "The transition duration of the time picker default is `0.3s`"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-tree/amalitech-tree/amalitech-tree.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-tree",
      "readme": "# amalitech-tree\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "emptyState",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "empty-state",
          "reflectToAttr": false,
          "docs": "To be shown when no node is rendered",
          "docsTags": [],
          "default": "`{\r\n    \"headline\": \"No items\",\r\n    \"description\": \"There are no items to display\"\r\n  }`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedNode",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "selected-node",
          "reflectToAttr": false,
          "docs": "selects a node at default",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getSelectedNode",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getSelectedNode() => Promise<string>",
          "parameters": [],
          "docs": "Returns selected node",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on first menu item. Use this method instead of the global\r\n`element.focus()`.",
          "docsTags": []
        },
        {
          "name": "subscribeToSelect",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(cb: any) => Promise<void>",
            "parameters": [
              {
                "name": "cb",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "subscribeToSelect(cb: any) => Promise<void>",
          "parameters": [
            {
              "name": "cb",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": [
            {
              "name": "param",
              "text": "cb"
            }
          ]
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "tree:tree-node-click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-tree/amalitech-tree-node/amalitech-tree-node.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-tree-node",
      "readme": "# amalitech-tree-node\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "reflects the expanded state",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Hyperlink to navigate to on click.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "label",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "level",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "level",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedNode",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "selected-node",
          "reflectToAttr": true,
          "docs": "Menu item selection state.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "null | number | string | undefined",
          "complexType": {
            "original": "string | number | null",
            "resolved": "null | number | string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The menu item value.",
          "docsTags": [],
          "values": [
            {
              "type": "null"
            },
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input`. Use this method instead of the global\r\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input`. Use this method instead of the global\r\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "tree:tree-node-click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the menu item is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "mouseup",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "keyup",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-validation/amalitech-validation.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-validation",
      "readme": "# amalitech-validation\r\n\r",
      "docs": "Amalitech Form Validation Feedback Component",
      "docsTags": [
        {
          "name": "slot",
          "text": "message - The message to display"
        },
        {
          "name": "slot",
          "text": "detail - The details associated with the message"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "autoClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "auto-close",
          "reflectToAttr": true,
          "docs": "Whether to automatically close the feedback component. Default duration is 5s",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeButtonType",
          "type": "\"arms\" | \"none\" | \"square\" | \"x\" | \"x-rounded\"",
          "complexType": {
            "original": "'arms' | 'x' | 'x-rounded' | 'square' | 'none'",
            "resolved": "\"arms\" | \"none\" | \"square\" | \"x\" | \"x-rounded\"",
            "references": {}
          },
          "mutable": false,
          "attr": "close-button-type",
          "reflectToAttr": true,
          "docs": "The type of close button to show",
          "docsTags": [],
          "default": "'arms'",
          "values": [
            {
              "value": "arms",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "square",
              "type": "string"
            },
            {
              "value": "x",
              "type": "string"
            },
            {
              "value": "x-rounded",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeSecs",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "close-secs",
          "reflectToAttr": false,
          "docs": "The number of seconds before closing the feedback component",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "transition",
          "type": "\"none\" | \"opacity\" | \"toast\"",
          "complexType": {
            "original": "'toast' | 'opacity' | 'none'",
            "resolved": "\"none\" | \"opacity\" | \"toast\"",
            "references": {}
          },
          "mutable": false,
          "attr": "transition",
          "reflectToAttr": false,
          "docs": "The style of feedback component when opening and closing",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "opacity",
              "type": "string"
            },
            {
              "value": "toast",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"error\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'success' | 'error' | 'warning'",
            "resolved": "\"error\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "The variant of validation feedback to show",
          "docsTags": [],
          "default": "'error'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "amalitechClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "This event is emmitted when the close button is clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--validation-border-size",
          "annotation": "prop",
          "docs": "Border size of the validation, default is `1px`"
        },
        {
          "name": "--validation-detail-color",
          "annotation": "prop",
          "docs": "Color of the validation detail, default is `#FDF4F4`"
        },
        {
          "name": "--validation-detail-size",
          "annotation": "prop",
          "docs": "Font size of the validation detail, default is `1rem`"
        },
        {
          "name": "--validation-error-bg",
          "annotation": "prop",
          "docs": "Background color of the validation error variant, default is `#FDF4F4`"
        },
        {
          "name": "--validation-error-border-color",
          "annotation": "prop",
          "docs": "Border color of the validation error variant, default is `#FDF4F4`"
        },
        {
          "name": "--validation-error-icon-color",
          "annotation": "prop",
          "docs": "Icon color of the validation error variant, default is `#FDF4F4`"
        },
        {
          "name": "--validation-error-msg-color",
          "annotation": "prop",
          "docs": "Text color of the validation error variant, default is `#FDF4F4`"
        },
        {
          "name": "--validation-msg-size",
          "annotation": "prop",
          "docs": "Font size of the validation message, default is `1.15rem`"
        },
        {
          "name": "--validation-padding",
          "annotation": "prop",
          "docs": "Padding of the validation, default is `1.5rem`"
        },
        {
          "name": "--validation-radius",
          "annotation": "prop",
          "docs": "Border radius of the validation, default is `0.5rem`"
        },
        {
          "name": "--validation-success-bg",
          "annotation": "prop",
          "docs": "Background color of the validation success variant, default is `#FDF4F4`"
        },
        {
          "name": "--validation-success-border-color",
          "annotation": "prop",
          "docs": "Border color of the validation success variant, default is `#FDF4F4`"
        },
        {
          "name": "--validation-success-icon-color",
          "annotation": "prop",
          "docs": "Icon color of the validation success variant, default is `#FDF4F4`"
        },
        {
          "name": "--validation-success-msg-color",
          "annotation": "prop",
          "docs": "Text color of the validation success variant, default is `#FDF4F4`"
        },
        {
          "name": "--validation-warning-bg",
          "annotation": "prop",
          "docs": "Background color of the validation warning variant, default is `#FDF4F4`"
        },
        {
          "name": "--validation-warning-border-color",
          "annotation": "prop",
          "docs": "Border color of the validation warning variant, default is `#FDF4F4`"
        },
        {
          "name": "--validation-warning-icon-color",
          "annotation": "prop",
          "docs": "Icon color of the validation warning variant, default is `#FDF4F4`"
        },
        {
          "name": "--validation-warning-msg-color",
          "annotation": "prop",
          "docs": "Text color of the validation warning variant, default is `#FDF4F4`"
        }
      ],
      "slots": [
        {
          "name": "detail",
          "docs": "The details associated with the message"
        },
        {
          "name": "message",
          "docs": "The message to display"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-visual-picker/amalitech-visual-picker/amalitech-visual-picker.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-visual-picker",
      "readme": "# amalitech-visual-picker\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "align",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "'horizontal' | 'vertical'",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "align",
          "reflectToAttr": false,
          "docs": "Specifies the direction of the visual picker",
          "docsTags": [],
          "default": "'horizontal'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disables the entire component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectVariant",
          "type": "\"checkbox\" | \"radio\"",
          "complexType": {
            "original": "'checkbox' | 'radio'",
            "resolved": "\"checkbox\" | \"radio\"",
            "references": {}
          },
          "mutable": false,
          "attr": "select-variant",
          "reflectToAttr": false,
          "docs": "Allow single or multiselect of choices. radio for single select, and checkbox for multiple selection",
          "docsTags": [],
          "default": "'checkbox'",
          "values": [
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "radio",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "uncoverable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "uncoverable",
          "reflectToAttr": false,
          "docs": "If set to true the component will only be selected by highlighting the edges, without covering the entire area.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "pickerChange",
          "detail": "{ value: string | string[]; }",
          "bubbles": true,
          "complexType": {
            "original": "{\r\n    value: string | string[];\r\n  }",
            "resolved": "{ value: string | string[]; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "This event is emitted when the selected items change",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "selection",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--visual-picker-active-border-width",
          "annotation": "prop",
          "docs": "The border width of the visual picker item when active default is `0.125rem`"
        },
        {
          "name": "--visual-picker-active-box-shadow",
          "annotation": "prop",
          "docs": "The box shadow of the visual picker item when active default is `0 4px 4px 0 rgba(0, 0, 0, 0.16)`"
        },
        {
          "name": "--visual-picker-active-color",
          "annotation": "prop",
          "docs": "The color of the visual picker item when active default is `amalitech-color-primary`"
        },
        {
          "name": "--visual-picker-bg",
          "annotation": "prop",
          "docs": "The background color of the visual picker item default is `amalitech-color-light`"
        },
        {
          "name": "--visual-picker-checked-icon",
          "annotation": "prop",
          "docs": "The icon of the visual picker item when checked default is a checkmark svg"
        },
        {
          "name": "--visual-picker-font-family",
          "annotation": "prop",
          "docs": "The font family of the visual picker item label default is `amalitech-base-font-family`"
        },
        {
          "name": "--visual-picker-font-size",
          "annotation": "prop",
          "docs": "The font size of the visual picker item label default is `1rem`"
        },
        {
          "name": "--visual-picker-font-weight",
          "annotation": "prop",
          "docs": "The font weight of the visual picker item label default is `500`"
        },
        {
          "name": "--visual-picker-gap",
          "annotation": "prop",
          "docs": "The gap between visual picker items default is 0.5rem"
        },
        {
          "name": "--visual-picker-item-border-color",
          "annotation": "prop",
          "docs": "The border color of the visual picker item default is `--amalitech-color-neutral-300`"
        },
        {
          "name": "--visual-picker-item-border-width",
          "annotation": "prop",
          "docs": "The border width of the visual picker item default is `0.125rem`"
        },
        {
          "name": "--visual-picker-item-padding",
          "annotation": "prop",
          "docs": "The padding of the visual picker item default is `1.25rem`"
        },
        {
          "name": "--visual-picker-item-radius",
          "annotation": "prop",
          "docs": "The border radius of the visual picker item default is `0.35rem`"
        },
        {
          "name": "--visual-picker-label-color",
          "annotation": "prop",
          "docs": "The color of the visual picker item label default is `amalitech-color-neutral-700`"
        },
        {
          "name": "--visual-picker-transition-duration",
          "annotation": "prop",
          "docs": "The transition duration of the visual picker item default is `0.3s`"
        },
        {
          "name": "--visual-picker-transition-timing",
          "annotation": "prop",
          "docs": "The transition timing of the visual picker item default is `ease`"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/amalitech-visual-picker/amalitech-visual-picker-item/amalitech-visual-picker-item.tsx",
      "encapsulation": "shadow",
      "tag": "amalitech-visual-picker-item",
      "readme": "# amalitech-visual-picker-item\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disables the item thus preventing it from being selectable",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Any label to be used with the item",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectVariant",
          "type": "\"checkbox\" | \"radio\"",
          "complexType": {
            "original": "'checkbox' | 'radio'",
            "resolved": "\"checkbox\" | \"radio\"",
            "references": {}
          },
          "mutable": false,
          "attr": "select-variant",
          "reflectToAttr": false,
          "docs": "Allow single or multiselect of choices. radio for single select, and checkbox for multiple selection",
          "docsTags": [],
          "default": "'checkbox'",
          "values": [
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "radio",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Indicates whether the item is selected or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "uncoverable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "uncoverable",
          "reflectToAttr": false,
          "docs": "If set to true the component will only be selected by highlighting the edges, without covering the entire area.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value for the picker item",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "selection",
          "detail": "{ [x: string]: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "Record<string, boolean>",
            "resolved": "{ [x: string]: boolean; }",
            "references": {
              "Record": {
                "location": "global",
                "id": "global::Record"
              }
            }
          },
          "cancelable": true,
          "composed": false,
          "docs": "This event is emitted when the item is selected",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--visual-picker-active-border-width",
          "annotation": "prop",
          "docs": "The border width of the visual picker item when active default is `0.125rem`"
        },
        {
          "name": "--visual-picker-active-box-shadow",
          "annotation": "prop",
          "docs": "The box shadow of the visual picker item when active default is `0 4px 4px 0 rgba(0, 0, 0, 0.16)`"
        },
        {
          "name": "--visual-picker-active-color",
          "annotation": "prop",
          "docs": "The color of the visual picker item when active default is `amalitech-color-primary`"
        },
        {
          "name": "--visual-picker-bg",
          "annotation": "prop",
          "docs": "The background color of the visual picker item default is `amalitech-color-light`"
        },
        {
          "name": "--visual-picker-checked-icon",
          "annotation": "prop",
          "docs": "The icon of the visual picker item when checked default is a checkmark svg"
        },
        {
          "name": "--visual-picker-font-family",
          "annotation": "prop",
          "docs": "The font family of the visual picker item label default is `amalitech-base-font-family`"
        },
        {
          "name": "--visual-picker-font-size",
          "annotation": "prop",
          "docs": "The font size of the visual picker item label default is `1rem`"
        },
        {
          "name": "--visual-picker-font-weight",
          "annotation": "prop",
          "docs": "The font weight of the visual picker item label default is `500`"
        },
        {
          "name": "--visual-picker-item-border-color",
          "annotation": "prop",
          "docs": "The border color of the visual picker item default is `amalitech-color-neutral-300`"
        },
        {
          "name": "--visual-picker-item-border-width",
          "annotation": "prop",
          "docs": "The border width of the visual picker item default is `0.125rem`"
        },
        {
          "name": "--visual-picker-item-padding",
          "annotation": "prop",
          "docs": "The padding of the visual picker item default is `1.25rem`"
        },
        {
          "name": "--visual-picker-item-radius",
          "annotation": "prop",
          "docs": "The border radius of the visual picker item default is `0.35rem`"
        },
        {
          "name": "--visual-picker-label-color",
          "annotation": "prop",
          "docs": "The color of the visual picker item label default is `amalitech-color-neutral-700`"
        },
        {
          "name": "--visual-picker-transition-duration",
          "annotation": "prop",
          "docs": "The transition duration of the visual picker item default is `0.3s`"
        },
        {
          "name": "--visual-picker-transition-timing",
          "annotation": "prop",
          "docs": "The transition timing of the visual picker item default is `ease`"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    }
  ],
  "typeLibrary": {
    "src/global/types.ts::Colors": {
      "declaration": "export type Colors = 'primary' | 'secondary' | 'tertiary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'default';",
      "docstring": "",
      "path": "src/global/types.ts"
    },
    "src/components/amalitech-data-table/table-interface.ts::Action": {
      "declaration": "export interface Action {\r\n  icon?: string;\r\n  callback: (row: any) => void;\r\n}",
      "docstring": "",
      "path": "src/components/amalitech-data-table/table-interface.ts"
    },
    "src/components/amalitech-radio/amalitech-radio-group/radio-group-inteface.ts::RadioGroupChangeEventDetail": {
      "declaration": "export interface RadioGroupChangeEventDetail<T = any> {\r\n  value: T;\r\n}",
      "docstring": "",
      "path": "src/components/amalitech-radio/amalitech-radio-group/radio-group-inteface.ts"
    }
  }
}