@import '../../global/variables.scss';

/**
* Exposed CSS Variables
* @prop --amalitech-switch-checked-bg: Background color of the switch when checked, default is `#dd5928`
* @prop --amalitech-switch-knob-bg: Background color of the knob, default is `#fff`
* @prop --amalitech-switch-unchecked-bg: Background color of the switch when unchecked, default is `#d3d3d3`
*/

$switch-width: 2.5rem;
$switch-height: 1.65rem;
$knob-size: 1.25rem;
$knob-offset: 0.2rem;
$transition-duration: 0.25s;

:host {
  display: inline-block;
}

.switch {
  cursor: pointer;
  appearance: none;
  display: inline-block;
  width: $switch-width;
  height: $switch-height;
  position: relative;
  background-color: var(--amalitech-switch-unchecked-bg, #d3d3d3);
  vertical-align: middle;
  border-radius: 2rem;
  transition: background-color $transition-duration;
  margin: 0;

  /**** Sizes ***/
  &.size-small {
    width: calc($switch-width * 0.75);
    height: calc($switch-height * 0.75);

    &::before {
      width: calc($knob-size * 0.75);
      height: calc($knob-size * 0.75);
      left: calc($knob-offset * 0.75);
      top: calc($knob-offset * 0.75);
      border-radius: calc($knob-size * 0.75 / 2);
    }
  }
  &.size-large {
    width: calc($switch-width * 1.5);
    height: calc($switch-height * 1.5);

    &::before {
      width: calc($knob-size * 1.5);
      height: calc($knob-size * 1.5);
      left: calc($knob-offset * 1.5);
      top: calc($knob-offset * 1.5);
      border-radius: calc($knob-size * 1.5 / 2);
    }
  }
  /*************/

  &::before {
    content: '';
    display: block;
    width: $knob-size;
    height: $knob-size;
    position: absolute;
    left: 0.2rem;
    top: 0.2rem;
    z-index: 1;
    background: var(--amalitech-switch-knob-bg, $light);
    border-radius: calc($knob-size / 2);
    box-shadow: 0 1px 3px #0003;
    transition: transform $transition-duration;
  }

  &:checked {
    background-color: var(--amalitech-switch-checked-bg, $orange-500);
    /**** Sizes ***/
    &.size-small {
      &::before {
        transform: translateX(calc($switch-width - $knob-size - $knob-offset * 2) * 0.75);
      }
    }
    &.size-large {
      &::before {
        transform: translateX(calc($switch-width - $knob-size - $knob-offset * 2) * 1.5);
      }
    }
    /*************/

    &::before {
      transform: translateX(calc($switch-width - $knob-size - $knob-offset * 2));
    }
  }

  &:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }
  &:focus-visible {
    @include focus;
  }
}
