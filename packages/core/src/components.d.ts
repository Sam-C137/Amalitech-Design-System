/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Colors } from "./global/types";
import { Action } from "./components/amalitech-data-table/table-interface";
import { RadioGroupChangeEventDetail } from "./components/amalitech-radio/amalitech-radio-group/radio-group-inteface";
export { Colors } from "./global/types";
export { Action } from "./components/amalitech-data-table/table-interface";
export { RadioGroupChangeEventDetail } from "./components/amalitech-radio/amalitech-radio-group/radio-group-inteface";
export namespace Components {
    interface AmalitechAccordion {
        /**
          * Indicates whether the accordion is animated or not.
         */
        "animated": boolean;
        /**
          * The description or content to be displayed when the accordion is expanded.
         */
        "description": string;
        /**
          * The label for the accordion button.
         */
        "label": string;
    }
    interface AmalitechAlert {
        "name": string;
        /**
          * position of the alert
         */
        "position": 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
    }
    interface AmalitechAlertContent {
        "actionLabel": string;
        "actionName": string;
        "actionable": boolean;
        /**
          * renders a close button to close the alert
         */
        "dismissible": boolean;
        /**
          * enables the high contrast color scheme
         */
        "highContrast": boolean;
        /**
          * type of alert to be shown
         */
        "state": 'success' | 'error' | 'info' | 'warning';
    }
    interface AmalitechBreadcrumb {
        /**
          * Alignment of the breadcrumb items.
         */
        "align": 'left' | 'right' | 'center';
        /**
          * Separator between the breadcrumb items.
         */
        "separator": 'dot' | 'arrow' | 'slash';
        /**
          * Size of the breadcrumb items.
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface AmalitechBreadcrumbItem {
        /**
          * Indicates whether the breadcrumb item is the current page's item.
         */
        "active": boolean;
        /**
          * The URL to navigate to when the breadcrumb item is clicked.
         */
        "href": string | undefined;
        /**
          * The target of the breadcrumb item link. Only applies when an `href` is provided.
         */
        "target": string | undefined;
    }
    /**
     * The Button component is a wrapper for the native button element with custom styling and variations.
     */
    interface AmalitechButton {
        /**
          * The disabled state of the button. If set to true, interactions would not be alowed, color will also change
         */
        "disabled": boolean;
        /**
          * Position of an icon in the button, default set to right
         */
        "iconPosition": 'left' | 'right';
        /**
          * (optional) Any aria label
         */
        "innerAriaLabel": string;
        /**
          * The tabindex of the inner button element
         */
        "innerTabIndex": number;
        /**
          * (optional) Any name of the button element
         */
        "name"?: string;
        /**
          * Size of the button
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The type attribute of the button
         */
        "type": 'button' | 'reset' | 'submit';
        /**
          * (optional) Any value of the button element
         */
        "value"?: string;
        /**
          * The color of the button, default is 'default'
         */
        "variant": Colors;
    }
    interface AmalitechCard {
        /**
          * The disabled state of the card. If set to true, interactions would not be alowed,
         */
        "disabled": boolean;
        /**
          * The href attribute of the card. If set, the card would render as an anchor tag.
         */
        "href"?: string;
        /**
          * The target attribute of the card. If href is set, the target defaults to _blank
         */
        "target": string;
        /**
          * The hover animation state of the card. If set to true, the card would have a hover animation.
         */
        "withHoverAnimation": boolean;
    }
    /**
     * Checkbox is an extension to the standard checkbox element with theming.
     */
    interface AmalitechCheckbox {
        /**
          * Inline style of the component.
         */
        "anyStyle": any;
        /**
          * Index of the element in tabbing order
         */
        "anyTabIndex": number;
        /**
          * Allows to select a boolean value instead of multiple values.
         */
        "binary": boolean;
        /**
          * Icon class of the checkbox icon.
         */
        "checkboxIcon": string;
        /**
          * If `true`, the checkbox is selected.
         */
        "checked": boolean;
        /**
          * When present, it specifies that the element should be disabled.
         */
        "disabled": boolean;
        /**
          * Focuses on the checkbox element.
         */
        "inputFocus": () => Promise<void>;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId": string;
        /**
          * Label of the checkbox.
         */
        "label": string;
        /**
          * Style class of the label.
         */
        "labelStyleClass": any;
        /**
          * Name of the checkbox group.
         */
        "name": string;
        /**
          * When present, it specifies that the component cannot be edited.
         */
        "readonly": boolean;
        /**
          * Style class of the component.
         */
        "styleClass": any;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value": any;
    }
    interface AmalitechDataTable {
        /**
          * actions to be performed on each row [{  'icon': '<svg></svg>',  'callback': () => {},  }]
         */
        "actions": Action[];
        /**
          * Columns configuration. [ {   "name":"name",   "label":"Name",   "width":300,   "fixed":true,   "template": function(row, column) { return row[column.name];}  }, {   "name":"age",   "label":"Age" } ]
         */
        "columns": any[];
        /**
          * Data to display on table [{  'id': '5',  'age': 21,  'name': 'John',  'company': 'India',  'email': 'john@example.com',  'phone': '+23356977855',  'address': '326 Irving Street, Ghana'  }]
         */
        "data": any[];
        /**
          * Description text to display when the table is empty.
          * @default 'There are no items to display'
         */
        "emptyStateDescription": string;
        /**
          * Headline text to display when the table is empty.
          * @default 'No items'
         */
        "emptyStateHeadline": string;
        /**
          * Alignment of the table header ('center', 'left', or 'right').
          * @default 'left'
         */
        "headerAlignment": 'center' | 'left' | 'right';
        /**
          * Key field to uniquely identify each row.
          * @default 'id'
         */
        "keyField": string;
        "managed": boolean;
        "page": number;
        /**
          * changes the amount of items on each page | pagination
         */
        "pageSize": number;
        /**
          * add pagination to the page
         */
        "paginate": boolean;
        /**
          * Selected row keys.
         */
        "selectedRowKeys": string[];
        /**
          * Type of selection ('checkbox' or undefined).
         */
        "selectionType": 'checkbox' | undefined;
        /**
          * sortable string
         */
        "sortBy": string;
        /**
          * changes the sort direction
         */
        "sortOrder": 'asc' | 'desc';
        /**
          * makes the table data sortable
         */
        "sortable": boolean;
        /**
          * Total number of items in the data set.
          * @default undefined
         */
        "totalItems": any;
    }
    interface AmalitechDatePicker {
        /**
          * This method toggles the date picker close
         */
        "close": () => Promise<void>;
        /**
          * The disabled state of the date picker
         */
        "disabled": boolean;
        /**
          * The first day of the week, 0 for Sunday and 1 for Monday
         */
        "firstDayOfWeek": '0' | '1';
        /**
          * The icon position of the date picker, either `left` or `right`, default is `right`
         */
        "iconPosition": 'left' | 'right';
        /**
          * The label of the date picker
         */
        "label": string;
        /**
          * The maximum date that a user can select in the format `YYYY-MM-DD`
         */
        "max": string | undefined;
        /**
          * The minimum date that a user can select in the format `YYYY-MM-DD`
         */
        "min": string | undefined;
        /**
          * This method toggles the date picker open
         */
        "open": () => Promise<void>;
        /**
          * The output format of the date picker, either `YYYY-MM-DD` or `DD-MM-YYYY`, default is `YYYY-MM-DD`
         */
        "outputFormat": 'YYYY-MM-DD' | 'DD-MM-YYYY';
        /**
          * The output type of the date picker, either `string` or `date`, default is `string`
         */
        "outputType": 'string' | 'date';
        /**
          * The value of the date picker in the format `YYYY-MM-DD`
         */
        "value": string | undefined;
    }
    interface AmalitechDockedUtilityBar {
    }
    interface AmalitechDockedUtilityBody {
        /**
          * The name attribute should match the content attribute placed on an `amalitech-docked-utility-item` element to indicate that the body is associated with that item.
         */
        "name": string;
    }
    interface AmalitechDockedUtilityItem {
        /**
          * The content attribute should match the name attribute placed on an `amalitech-docked-utility-body` element to indicate that the body is associated with this item.
         */
        "content": string;
    }
    /**
     * The Input component is a wrapper to the HTML input element with custom styling and additional
     * functionality.
     */
    interface AmalitechInput {
        /**
          * Title text of the input text.
         */
        "aTitle": string;
        /**
          * Used to indicate that user input is required on an element before a form can be submitted.
         */
        "anyAriaRequired": boolean;
        /**
          * Specifies tab order of the element.
         */
        "anyTabIndex": string;
        /**
          * (optional) id or space separated list of ids of elements that provide or link to additional related information.
         */
        "ariaDetailedId"?: string;
        /**
          * Used to define a string that autocomplete attribute the current element.
         */
        "autocomplete": string;
        /**
          * (optional) the input should automatically get focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * (optional) Input counter
         */
        "counter": boolean;
        /**
          * When present, it specifies that the element should be disabled
         */
        "disabled": boolean;
        /**
          * When enabled, the label will have floating effect on input text focus
         */
        "floatLabel": boolean;
        /**
          * Retrieves a reference to the input element within the component.
          * @returns The input element, or null if not found.
          * @example const inputElement = await myComponent.getInputRef(); if (inputElement) {   // Do something with the input element   inputElement.focus(); }
         */
        "getInputRef": () => Promise<HTMLInputElement | null>;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * Inline style of the element
         */
        "inputClass"?: any;
        /**
          * The class of input holder element
         */
        "inputHolderClass": any;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId": string;
        /**
          * Inline style of the input element
         */
        "inputStyle"?: any;
        /**
          * The class of input wrapper element
         */
        "inputWrapperClass": any;
        /**
          * Label of the input text
         */
        "label": string;
        /**
          * The class of left icon wrapper element
         */
        "leftIconClass": any;
        /**
          * (optional) input list
         */
        "list"?: string;
        /**
          * (optional) define the numeric maximum value of input types such as month, date, time
         */
        "max"?: number;
        /**
          * Maximum number of character allows in the input field.
         */
        "maxLength"?: number;
        /**
          * (optional) defines the numeric minimum value of input types such as month, date, time
         */
        "min"?: number;
        /**
          * (optional) Input text string min length
         */
        "minLength"?: number;
        /**
          * Name of the input text.
         */
        "name": string;
        /**
          * Regular expression for input field
         */
        "pattern"?: string;
        /**
          * Default text to display when no value in input text
         */
        "placeholder": string;
        /**
          * When present, it specifies that the element value cannot be changed
         */
        "readonly": boolean;
        /**
          * When present, it specifies that an input field is required.
         */
        "required": boolean;
        /**
          * Size of the input field.
         */
        "size": number;
        /**
          * Inline style for the entire element
         */
        "styles"?: string;
        /**
          * Input type
         */
        "type": | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'date'
    | 'month' // example yyyy-mm
    | 'week' // example yyyy-W##
    | 'time' // example hh:mm
    | 'datetime-local' // example yyyy-mm-ddThh:mm
    | 'url';
        /**
          * Value of the input text
         */
        "value": string;
    }
    interface AmalitechMap {
        /**
          * Adds a marker to the map
          * @param long , name, iconUrl, zoom}
          * @see https://leafletjs.com/reference.html#marker
         */
        "addMarker": (lat: number, long: number, name: string, iconUrl?: string, zoom?: number) => Promise<void>;
        /**
          * Sets the height of the map
         */
        "height": string;
        /**
          * If set to true, hides the list of nearby landmarks
         */
        "hideNearByList": boolean;
        /**
          * Specifies the icon url
         */
        "iconUrl": string;
        /**
          * Specifies the latitude value
         */
        "latitude": number;
        /**
          * Specifies the longitude value
         */
        "longitude": number;
        /**
          * Adds a name to be shown in the popup
         */
        "name": string;
        /**
          * Sets the width of the map
         */
        "width": string;
        /**
          * Sets the zoom level of the map
         */
        "zoom": number;
    }
    /**
     * The modal component is a custom element used to display content in a layer above the app.
     * it comes with default text for cancel and confirm buttons but can be customized with
     * @prop confirmText
     * @prop cancelText
     */
    interface AmalitechModal {
        /**
          * Text to show for cancel
         */
        "cancelText": string;
        /**
          * The customization for close button
         */
        "closeButtonType": 'arms' | 'x' | 'x-rounded' | 'rounded' | 'square';
        /**
          * Closes the modal
         */
        "closeModal": () => Promise<void>;
        /**
          * Text to show for confirmation
         */
        "confirmText": string;
        /**
          * Whether to show the confirmation only variant
         */
        "confirmation": boolean;
        /**
          * Opens the modal
         */
        "openModal": () => Promise<void>;
        /**
          * Make the modal scrollable/full screen
         */
        "scrollable": boolean;
        /**
          * Show or hide modal
         */
        "visible": boolean;
    }
    interface AmalitechNavItem {
        /**
          * Whether the nav item is active or not
         */
        "active": boolean;
        /**
          * Whether the nav item is disabled
         */
        "disabled": boolean;
    }
    interface AmalitechNavMobile {
        /**
          * The alignment of the mobile dropdown trigger icon. Defaults to `left`
         */
        "align": 'left' | 'right';
    }
    /**
     * This navbar component is designed to be used with child `amalitech-nav-item` components.
     */
    interface AmalitechNavbar {
        /**
          * The layout of the navbar. Defaults to `1` aka: "logo | nav | search"
         */
        "layout": 'nav-items-center' | 'nav-items-right' | 'nav-items-left';
        /**
          * The alignment of the mobile dropdown trigger icon. Defaults to `right`
         */
        "mobileIconAlign": 'left' | 'right';
    }
    interface AmalitechPagination {
        /**
          * The number of items per page
         */
        "limitNumber": number;
        /**
          * The current page number
         */
        "pageNumber": number;
        /**
          * The number of siblings to show in +2 increments before ellipses. eg: `1 = 5, 2 = 7, 3 = 9`
         */
        "siblings": number;
        /**
          * The size of the pagination component
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The total number of items in the data set
         */
        "totalItems": number;
        /**
          * (optional) The total number of pages if you do not want the component to handle calculating the total pages based on the total items and limit number
         */
        "totalPagesCount"?: number;
    }
    interface AmalitechProgress {
        /**
          * Only present and required if the value is not indeterminate. Set to a decimal value between 0, or valuemin if present, and max-value indicating the current value of the progress bar.
         */
        "currentValue": number;
        /**
          * Used to show indeterminate or pending progress state.
         */
        "indeterminate": boolean;
        /**
          * Defines the string value or identifies the element (or elements) that label the progressbar element providing an accessible name.
         */
        "labeledBy": string;
        /**
          * Set to a decimal value representing the maximum value, and greater than min-value. If not present, the default value is 100.
         */
        "maxValue": number;
        /**
          * Set to a decimal value representing the minimum value, and less than max-value. If not present, the default value is 0.
         */
        "minValue": number;
        /**
          * Divides progress bar in multiple progress steps.
         */
        "steps": boolean;
        /**
          * Assistive technologies often present the value of current-value as a percentage. If this would not be accurate use this property to make the progress bar value understandable.
         */
        "valueText": string;
    }
    interface AmalitechProgressBar {
        /**
          * Provide a hint to the user of what's happening.
         */
        "helperText": string;
        /**
          * Hides the label.
         */
        "hideLabel": boolean;
        /**
          * Hides the value.
         */
        "hideValue": boolean;
        /**
          * If `true`, the progress bar will be displayed as an indeterminate progress bar.
         */
        "indeterminate": boolean;
        /**
          * A label describing the progress bar.
         */
        "label": string;
        /**
          * The maximum value.
         */
        "maximumValue": number;
        /**
          * The minimum value.
         */
        "minimumValue": number;
        /**
          * Possible values are: `"sm"`, `"lg"` and `"md"` in pixel. Defaults to `"sm"`.
         */
        "size": 'sm' | 'md' | 'lg';
        /**
          * The status of the progress bar.
         */
        "status": 'active' | 'success' | 'error';
        /**
          * The current value.
         */
        "value": number;
    }
    interface AmalitechProgressRing {
        /**
          * If the progress ring should be indeterminate.
         */
        "indeterminate": boolean;
        /**
          * The color of the background of the progress ring, in any CSS valid format.
         */
        "outlineColor": string;
        /**
          * The current progress value in percentage.
         */
        "progress": number;
        /**
          * The color of the progress ring, in any CSS valid format.
         */
        "progressColor": string;
        /**
          * The text to display inside the progress ring.
         */
        "progressText"?: string;
        /**
          * The radius of the progress ring in px.
         */
        "radius": number;
        /**
          * The stroke width of the progress ring in px.
         */
        "stroke": number;
    }
    interface AmalitechRadioButton {
        /**
          * Inline style of the component.
         */
        "anyStyle": any;
        /**
          * Index of the element in tabbing order
         */
        "anyTabIndex"?: number;
        /**
          * When present, it specifies that the element should be disabled.
         */
        "disabled": boolean;
        /**
          * If `true`, the radio button has a double border.
         */
        "doubleBorder": boolean;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId": string;
        /**
          * Label of the radiobutton.
         */
        "label": string;
        /**
          * Style class of the label.
         */
        "labelStyleClass"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Applies focus.
         */
        "setFocus": (event: FocusEvent) => Promise<void>;
        /**
          * Style class of the component.
         */
        "styleClass": any;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface AmalitechRadioGroup {
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    /**
     * The Select component is a custom element designed to be used with child select-option elements.
     */
    interface AmalitechSelect {
        /**
          * This method clears all selected options
         */
        "clear": () => Promise<void>;
        /**
          * If true, the user cannot interact with the select component.
         */
        "disabled": boolean;
        /**
          * The label of the select component eg: 'Select a fruit' or 'Select a car'
         */
        "label": string;
        /**
          * If true, the user can select multiple options at once.
         */
        "multiple": boolean;
        /**
          * Toggles the open state of the dropdown
         */
        "open": boolean;
        /**
          * If true, the select component will be required
         */
        "required": boolean;
        /**
          * If true, the dropdown will be scrollable
         */
        "scrollable": boolean;
        /**
          * The style to be applied when items are checked
         */
        "selectedStyle": 'checkmark' | 'checkRounded' | 'dot';
    }
    interface AmalitechSelectMultiple {
        /**
          * If true, the user cannot interact with the select component.
         */
        "disabled": boolean;
        /**
          * The label of the select component eg: 'Select a fruit' or 'Select a car'
         */
        "label": string;
        /**
          * Toggles the open state of the dropdown
         */
        "open": boolean;
        /**
          * If true, the select component will be required
         */
        "required": boolean;
        /**
          * If true, the dropdown will be scrollable
         */
        "scrollable": boolean;
        /**
          * The state of the select component eg: 'single' or 'multiple'
         */
        "state": 'single' | 'multiple';
    }
    /**
     * The select option component is designed to be nested within a select component.
     */
    interface AmalitechSelectOption {
        /**
          * Clears the selected state of the option
         */
        "clear": () => Promise<void>;
        /**
          * If true, the user cannot interact with the option
         */
        "disabled": boolean;
        /**
          * If true, the option is selected
         */
        "selected": boolean;
        /**
          * The style to be applied when items are checked
         */
        "selectedStyle": 'checkmark' | 'checkRounded' | 'dot';
        /**
          * The value of the option
         */
        "value": string;
    }
    interface AmalitechSelectSingle {
        /**
          * If true, the user cannot interact with the select component.
         */
        "disabled": boolean;
        /**
          * The label of the select component eg: 'Select a fruit' or 'Select a car'
         */
        "label": string;
        /**
          * Toggles the open state of the dropdown
         */
        "open": boolean;
        /**
          * If true, the select component will be required
         */
        "required": boolean;
        /**
          * If true, the dropdown will be scrollable
         */
        "scrollable": boolean;
        /**
          * The state of the select component eg: 'single' or 'multiple'
         */
        "state": 'single' | 'multiple';
    }
    interface AmalitechSnackbar {
        /**
          * Auto Close Enables the auto close functionality
         */
        "autoClose": boolean;
        /**
          * Call To Action Text Sets the call-to-action text
         */
        "callToActionText": string;
        /**
          * Sets the duration before the snackbar closes
         */
        "closeSecs": number;
        /**
          * Closeable Shows a close button if true
         */
        "closeable": boolean;
        /**
          * href attribute Sets the url of the snackbar
         */
        "href": string;
        /**
          * Rounded Sets the border radius of the snackbar to round or square
         */
        "rounded": boolean;
        /**
          * Snackbar text Sets the Snackbar text
         */
        "snackbarText": string;
        /**
          * target attribute specifies how to open the url of the snackbar
         */
        "target": string;
    }
    interface AmalitechStarRating {
        /**
          * If true, the star rating will show a variant that animates on render
         */
        "animated": boolean;
        /**
          * The number of stars to display
         */
        "count": number;
        /**
          * Indicates the disabled state of the component
         */
        "disabled": boolean;
        /**
          * If true, the user cannot hover over the star rating
         */
        "hoverDisabled": boolean;
        /**
          * If true, the user cannot interact with the star rating
         */
        "readonly": boolean;
        /**
          * The size of the star rating
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The color of the star rating stroke, default is `#474d66`
         */
        "strokeColor": string;
        /**
          * The value of the star rating
         */
        "value": number;
    }
    /**
     * The switch component is a wrapper around the native checkbox element.
     */
    interface AmalitechSwitch {
        /**
          * The whether the component is checked or not
         */
        "checked": boolean;
        /**
          * The whether the component is disabled or not
         */
        "disabled": boolean;
        /**
          * The name attribute of the underlying checkbox element
         */
        "name": string | undefined;
        /**
          * The size of the switch component
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The id of the underlying checkbox element
         */
        "switchId": string | undefined;
        /**
          * The value attribute of the underlying checkbox element
         */
        "value": string | undefined;
    }
    interface AmalitechTab {
        /**
          * Index of the active tab to change selected tab programmatically.
         */
        "activeIndex": number;
        /**
          * Inline style of the component.
         */
        "anyStyle": any;
        /**
          * Style class of the component.
         */
        "styleClass": any;
    }
    interface AmalitechTabPanel {
        /**
          * When true, tab cannot be activated.
         */
        "disabled": boolean;
        /**
          * Defines if tab is active.
         */
        "selected": boolean;
        /**
          * Title of the tabPanel.
         */
        "tabName": string | null;
    }
    interface AmalitechTimePicker {
        /**
          * Closes the time picker dropdown
         */
        "close": () => Promise<void>;
        /**
          * The label of the time picker
         */
        "label": string;
        /**
          * The maximum time that can be selected in the format `00:00`
         */
        "max": string | undefined;
        /**
          * If true, time picker will be in 12 hour format
         */
        "meridian": boolean;
        /**
          * The minimum time that can be selected in the format `00:00`
         */
        "min": string | undefined;
        /**
          * Opens the time picker dropdown
         */
        "open": () => Promise<void>;
        /**
          * The format of the time picker event detail
         */
        "outputFormat": 'string' | 'date';
        /**
          * If true, the time picker will show a required state
         */
        "required": boolean;
        /**
          * If true, time picker will show seconds
         */
        "seconds": boolean;
        /**
          * The size of the time picker
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The current value of the time picker in the format `00:00`
         */
        "value": string | undefined;
    }
    interface AmalitechTree {
        /**
          * To be shown when no node is rendered
         */
        "emptyState": string;
        /**
          * Returns selected node
         */
        "getSelectedNode": () => Promise<string>;
        /**
          * selects a node at default
         */
        "selectedNode": string;
        /**
          * Sets focus on first menu item. Use this method instead of the global `element.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * @param cb
         */
        "subscribeToSelect": (cb: any) => Promise<void>;
    }
    interface AmalitechTreeNode {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        /**
          * reflects the expanded state
         */
        "expanded": boolean;
        /**
          * Hyperlink to navigate to on click.
         */
        "href": string;
        /**
          * label
         */
        "label": string;
        "level": number;
        /**
          * Menu item selection state.
         */
        "selectedNode": string;
        /**
          * Sets blur on the native `input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The menu item value.
         */
        "value"?: string | number | null;
    }
    /**
     * Amalitech Form Validation Feedback Component
     */
    interface AmalitechValidation {
        /**
          * Whether to automatically close the feedback component. Default duration is 5s
         */
        "autoClose": boolean;
        /**
          * The type of close button to show
         */
        "closeButtonType": 'arms' | 'x' | 'x-rounded' | 'square' | 'none';
        /**
          * The number of seconds before closing the feedback component
         */
        "closeSecs": string | undefined;
        /**
          * The style of feedback component when opening and closing
         */
        "transition": 'toast' | 'opacity' | 'none';
        /**
          * The variant of validation feedback to show
         */
        "variant": 'success' | 'error' | 'warning';
    }
    interface AmalitechVisualPicker {
        /**
          * Specifies the direction of the visual picker
         */
        "align": 'horizontal' | 'vertical';
        /**
          * Disables the entire component
         */
        "disabled": boolean;
        /**
          * Allow single or multiselect of choices. radio for single select, and checkbox for multiple selection
         */
        "selectVariant": 'checkbox' | 'radio';
        /**
          * If set to true the component will only be selected by highlighting the edges, without covering the entire area.
         */
        "uncoverable": boolean;
    }
    interface AmalitechVisualPickerItem {
        /**
          * Disables the item thus preventing it from being selectable
         */
        "disabled": boolean;
        /**
          * Any label to be used with the item
         */
        "label": string;
        /**
          * Allow single or multiselect of choices. radio for single select, and checkbox for multiple selection
         */
        "selectVariant": 'checkbox' | 'radio';
        /**
          * Indicates whether the item is selected or not
         */
        "selected": boolean;
        /**
          * If set to true the component will only be selected by highlighting the edges, without covering the entire area.
         */
        "uncoverable": boolean;
        /**
          * The value for the picker item
         */
        "value": string;
    }
}
export interface AmalitechAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechAccordionElement;
}
export interface AmalitechAlertContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechAlertContentElement;
}
export interface AmalitechCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechCheckboxElement;
}
export interface AmalitechDataTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechDataTableElement;
}
export interface AmalitechDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechDatePickerElement;
}
export interface AmalitechInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechInputElement;
}
export interface AmalitechModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechModalElement;
}
export interface AmalitechNavItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechNavItemElement;
}
export interface AmalitechPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechPaginationElement;
}
export interface AmalitechRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechRadioButtonElement;
}
export interface AmalitechRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechRadioGroupElement;
}
export interface AmalitechSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechSelectElement;
}
export interface AmalitechSelectMultipleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechSelectMultipleElement;
}
export interface AmalitechSelectOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechSelectOptionElement;
}
export interface AmalitechSnackbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechSnackbarElement;
}
export interface AmalitechStarRatingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechStarRatingElement;
}
export interface AmalitechSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechSwitchElement;
}
export interface AmalitechTimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechTimePickerElement;
}
export interface AmalitechTreeNodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechTreeNodeElement;
}
export interface AmalitechValidationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechValidationElement;
}
export interface AmalitechVisualPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechVisualPickerElement;
}
export interface AmalitechVisualPickerItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmalitechVisualPickerItemElement;
}
declare global {
    interface HTMLAmalitechAccordionElementEventMap {
        "toggle": any;
    }
    interface HTMLAmalitechAccordionElement extends Components.AmalitechAccordion, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechAccordionElementEventMap>(type: K, listener: (this: HTMLAmalitechAccordionElement, ev: AmalitechAccordionCustomEvent<HTMLAmalitechAccordionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechAccordionElementEventMap>(type: K, listener: (this: HTMLAmalitechAccordionElement, ev: AmalitechAccordionCustomEvent<HTMLAmalitechAccordionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechAccordionElement: {
        prototype: HTMLAmalitechAccordionElement;
        new (): HTMLAmalitechAccordionElement;
    };
    interface HTMLAmalitechAlertElement extends Components.AmalitechAlert, HTMLStencilElement {
    }
    var HTMLAmalitechAlertElement: {
        prototype: HTMLAmalitechAlertElement;
        new (): HTMLAmalitechAlertElement;
    };
    interface HTMLAmalitechAlertContentElementEventMap {
        "alert:alert-content-dismiss": any;
    }
    interface HTMLAmalitechAlertContentElement extends Components.AmalitechAlertContent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechAlertContentElementEventMap>(type: K, listener: (this: HTMLAmalitechAlertContentElement, ev: AmalitechAlertContentCustomEvent<HTMLAmalitechAlertContentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechAlertContentElementEventMap>(type: K, listener: (this: HTMLAmalitechAlertContentElement, ev: AmalitechAlertContentCustomEvent<HTMLAmalitechAlertContentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechAlertContentElement: {
        prototype: HTMLAmalitechAlertContentElement;
        new (): HTMLAmalitechAlertContentElement;
    };
    interface HTMLAmalitechBreadcrumbElement extends Components.AmalitechBreadcrumb, HTMLStencilElement {
    }
    var HTMLAmalitechBreadcrumbElement: {
        prototype: HTMLAmalitechBreadcrumbElement;
        new (): HTMLAmalitechBreadcrumbElement;
    };
    interface HTMLAmalitechBreadcrumbItemElement extends Components.AmalitechBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLAmalitechBreadcrumbItemElement: {
        prototype: HTMLAmalitechBreadcrumbItemElement;
        new (): HTMLAmalitechBreadcrumbItemElement;
    };
    /**
     * The Button component is a wrapper for the native button element with custom styling and variations.
     */
    interface HTMLAmalitechButtonElement extends Components.AmalitechButton, HTMLStencilElement {
    }
    var HTMLAmalitechButtonElement: {
        prototype: HTMLAmalitechButtonElement;
        new (): HTMLAmalitechButtonElement;
    };
    interface HTMLAmalitechCardElement extends Components.AmalitechCard, HTMLStencilElement {
    }
    var HTMLAmalitechCardElement: {
        prototype: HTMLAmalitechCardElement;
        new (): HTMLAmalitechCardElement;
    };
    interface HTMLAmalitechCheckboxElementEventMap {
        "valueChange": any;
        "aOnFocus": any;
        "aOnBlur": any;
    }
    /**
     * Checkbox is an extension to the standard checkbox element with theming.
     */
    interface HTMLAmalitechCheckboxElement extends Components.AmalitechCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechCheckboxElementEventMap>(type: K, listener: (this: HTMLAmalitechCheckboxElement, ev: AmalitechCheckboxCustomEvent<HTMLAmalitechCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechCheckboxElementEventMap>(type: K, listener: (this: HTMLAmalitechCheckboxElement, ev: AmalitechCheckboxCustomEvent<HTMLAmalitechCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechCheckboxElement: {
        prototype: HTMLAmalitechCheckboxElement;
        new (): HTMLAmalitechCheckboxElement;
    };
    interface HTMLAmalitechDataTableElementEventMap {
        "table:table-cell-click": any;
        "table:table-select-change": any;
        "table:table-sort": any;
        "table:table-page": any;
    }
    interface HTMLAmalitechDataTableElement extends Components.AmalitechDataTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechDataTableElementEventMap>(type: K, listener: (this: HTMLAmalitechDataTableElement, ev: AmalitechDataTableCustomEvent<HTMLAmalitechDataTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechDataTableElementEventMap>(type: K, listener: (this: HTMLAmalitechDataTableElement, ev: AmalitechDataTableCustomEvent<HTMLAmalitechDataTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechDataTableElement: {
        prototype: HTMLAmalitechDataTableElement;
        new (): HTMLAmalitechDataTableElement;
    };
    interface HTMLAmalitechDatePickerElementEventMap {
        "amalitechDateChange": string | Date;
        "amalitechDateClear": void;
    }
    interface HTMLAmalitechDatePickerElement extends Components.AmalitechDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechDatePickerElementEventMap>(type: K, listener: (this: HTMLAmalitechDatePickerElement, ev: AmalitechDatePickerCustomEvent<HTMLAmalitechDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechDatePickerElementEventMap>(type: K, listener: (this: HTMLAmalitechDatePickerElement, ev: AmalitechDatePickerCustomEvent<HTMLAmalitechDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechDatePickerElement: {
        prototype: HTMLAmalitechDatePickerElement;
        new (): HTMLAmalitechDatePickerElement;
    };
    interface HTMLAmalitechDockedUtilityBarElement extends Components.AmalitechDockedUtilityBar, HTMLStencilElement {
    }
    var HTMLAmalitechDockedUtilityBarElement: {
        prototype: HTMLAmalitechDockedUtilityBarElement;
        new (): HTMLAmalitechDockedUtilityBarElement;
    };
    interface HTMLAmalitechDockedUtilityBodyElement extends Components.AmalitechDockedUtilityBody, HTMLStencilElement {
    }
    var HTMLAmalitechDockedUtilityBodyElement: {
        prototype: HTMLAmalitechDockedUtilityBodyElement;
        new (): HTMLAmalitechDockedUtilityBodyElement;
    };
    interface HTMLAmalitechDockedUtilityItemElement extends Components.AmalitechDockedUtilityItem, HTMLStencilElement {
    }
    var HTMLAmalitechDockedUtilityItemElement: {
        prototype: HTMLAmalitechDockedUtilityItemElement;
        new (): HTMLAmalitechDockedUtilityItemElement;
    };
    interface HTMLAmalitechInputElementEventMap {
        "valueChange": any;
    }
    /**
     * The Input component is a wrapper to the HTML input element with custom styling and additional
     * functionality.
     */
    interface HTMLAmalitechInputElement extends Components.AmalitechInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechInputElementEventMap>(type: K, listener: (this: HTMLAmalitechInputElement, ev: AmalitechInputCustomEvent<HTMLAmalitechInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechInputElementEventMap>(type: K, listener: (this: HTMLAmalitechInputElement, ev: AmalitechInputCustomEvent<HTMLAmalitechInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechInputElement: {
        prototype: HTMLAmalitechInputElement;
        new (): HTMLAmalitechInputElement;
    };
    interface HTMLAmalitechMapElement extends Components.AmalitechMap, HTMLStencilElement {
    }
    var HTMLAmalitechMapElement: {
        prototype: HTMLAmalitechMapElement;
        new (): HTMLAmalitechMapElement;
    };
    interface HTMLAmalitechModalElementEventMap {
        "amalitechConfirm": void;
        "amalitechCancel": void;
    }
    /**
     * The modal component is a custom element used to display content in a layer above the app.
     * it comes with default text for cancel and confirm buttons but can be customized with
     * @prop confirmText
     * @prop cancelText
     */
    interface HTMLAmalitechModalElement extends Components.AmalitechModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechModalElementEventMap>(type: K, listener: (this: HTMLAmalitechModalElement, ev: AmalitechModalCustomEvent<HTMLAmalitechModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechModalElementEventMap>(type: K, listener: (this: HTMLAmalitechModalElement, ev: AmalitechModalCustomEvent<HTMLAmalitechModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechModalElement: {
        prototype: HTMLAmalitechModalElement;
        new (): HTMLAmalitechModalElement;
    };
    interface HTMLAmalitechNavItemElementEventMap {
        "switch": void;
    }
    interface HTMLAmalitechNavItemElement extends Components.AmalitechNavItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechNavItemElementEventMap>(type: K, listener: (this: HTMLAmalitechNavItemElement, ev: AmalitechNavItemCustomEvent<HTMLAmalitechNavItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechNavItemElementEventMap>(type: K, listener: (this: HTMLAmalitechNavItemElement, ev: AmalitechNavItemCustomEvent<HTMLAmalitechNavItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechNavItemElement: {
        prototype: HTMLAmalitechNavItemElement;
        new (): HTMLAmalitechNavItemElement;
    };
    interface HTMLAmalitechNavMobileElement extends Components.AmalitechNavMobile, HTMLStencilElement {
    }
    var HTMLAmalitechNavMobileElement: {
        prototype: HTMLAmalitechNavMobileElement;
        new (): HTMLAmalitechNavMobileElement;
    };
    /**
     * This navbar component is designed to be used with child `amalitech-nav-item` components.
     */
    interface HTMLAmalitechNavbarElement extends Components.AmalitechNavbar, HTMLStencilElement {
    }
    var HTMLAmalitechNavbarElement: {
        prototype: HTMLAmalitechNavbarElement;
        new (): HTMLAmalitechNavbarElement;
    };
    interface HTMLAmalitechPaginationElementEventMap {
        "amalitechPageChange": number;
    }
    interface HTMLAmalitechPaginationElement extends Components.AmalitechPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechPaginationElementEventMap>(type: K, listener: (this: HTMLAmalitechPaginationElement, ev: AmalitechPaginationCustomEvent<HTMLAmalitechPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechPaginationElementEventMap>(type: K, listener: (this: HTMLAmalitechPaginationElement, ev: AmalitechPaginationCustomEvent<HTMLAmalitechPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechPaginationElement: {
        prototype: HTMLAmalitechPaginationElement;
        new (): HTMLAmalitechPaginationElement;
    };
    interface HTMLAmalitechProgressElement extends Components.AmalitechProgress, HTMLStencilElement {
    }
    var HTMLAmalitechProgressElement: {
        prototype: HTMLAmalitechProgressElement;
        new (): HTMLAmalitechProgressElement;
    };
    interface HTMLAmalitechProgressBarElement extends Components.AmalitechProgressBar, HTMLStencilElement {
    }
    var HTMLAmalitechProgressBarElement: {
        prototype: HTMLAmalitechProgressBarElement;
        new (): HTMLAmalitechProgressBarElement;
    };
    interface HTMLAmalitechProgressRingElement extends Components.AmalitechProgressRing, HTMLStencilElement {
    }
    var HTMLAmalitechProgressRingElement: {
        prototype: HTMLAmalitechProgressRingElement;
        new (): HTMLAmalitechProgressRingElement;
    };
    interface HTMLAmalitechRadioButtonElementEventMap {
        "aOnSelect": any;
        "aOnFocus": any;
        "aOnBlur": any;
    }
    interface HTMLAmalitechRadioButtonElement extends Components.AmalitechRadioButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechRadioButtonElementEventMap>(type: K, listener: (this: HTMLAmalitechRadioButtonElement, ev: AmalitechRadioButtonCustomEvent<HTMLAmalitechRadioButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechRadioButtonElementEventMap>(type: K, listener: (this: HTMLAmalitechRadioButtonElement, ev: AmalitechRadioButtonCustomEvent<HTMLAmalitechRadioButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechRadioButtonElement: {
        prototype: HTMLAmalitechRadioButtonElement;
        new (): HTMLAmalitechRadioButtonElement;
    };
    interface HTMLAmalitechRadioGroupElementEventMap {
        "valueChange": RadioGroupChangeEventDetail;
    }
    interface HTMLAmalitechRadioGroupElement extends Components.AmalitechRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechRadioGroupElementEventMap>(type: K, listener: (this: HTMLAmalitechRadioGroupElement, ev: AmalitechRadioGroupCustomEvent<HTMLAmalitechRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechRadioGroupElementEventMap>(type: K, listener: (this: HTMLAmalitechRadioGroupElement, ev: AmalitechRadioGroupCustomEvent<HTMLAmalitechRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechRadioGroupElement: {
        prototype: HTMLAmalitechRadioGroupElement;
        new (): HTMLAmalitechRadioGroupElement;
    };
    interface HTMLAmalitechSelectElementEventMap {
        "amalitechChange": Record<string, string | string[]>;
    }
    /**
     * The Select component is a custom element designed to be used with child select-option elements.
     */
    interface HTMLAmalitechSelectElement extends Components.AmalitechSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechSelectElementEventMap>(type: K, listener: (this: HTMLAmalitechSelectElement, ev: AmalitechSelectCustomEvent<HTMLAmalitechSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechSelectElementEventMap>(type: K, listener: (this: HTMLAmalitechSelectElement, ev: AmalitechSelectCustomEvent<HTMLAmalitechSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechSelectElement: {
        prototype: HTMLAmalitechSelectElement;
        new (): HTMLAmalitechSelectElement;
    };
    interface HTMLAmalitechSelectMultipleElementEventMap {
        "multiDeselection": {
    value: string;
    textContent: string;
  };
    }
    interface HTMLAmalitechSelectMultipleElement extends Components.AmalitechSelectMultiple, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechSelectMultipleElementEventMap>(type: K, listener: (this: HTMLAmalitechSelectMultipleElement, ev: AmalitechSelectMultipleCustomEvent<HTMLAmalitechSelectMultipleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechSelectMultipleElementEventMap>(type: K, listener: (this: HTMLAmalitechSelectMultipleElement, ev: AmalitechSelectMultipleCustomEvent<HTMLAmalitechSelectMultipleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechSelectMultipleElement: {
        prototype: HTMLAmalitechSelectMultipleElement;
        new (): HTMLAmalitechSelectMultipleElement;
    };
    interface HTMLAmalitechSelectOptionElementEventMap {
        "selection": {
    value: string;
    textContent: string;
  };
        "deselection": {
    value: string;
    textContent: string;
  };
        "clearEvent": void;
    }
    /**
     * The select option component is designed to be nested within a select component.
     */
    interface HTMLAmalitechSelectOptionElement extends Components.AmalitechSelectOption, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechSelectOptionElementEventMap>(type: K, listener: (this: HTMLAmalitechSelectOptionElement, ev: AmalitechSelectOptionCustomEvent<HTMLAmalitechSelectOptionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechSelectOptionElementEventMap>(type: K, listener: (this: HTMLAmalitechSelectOptionElement, ev: AmalitechSelectOptionCustomEvent<HTMLAmalitechSelectOptionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechSelectOptionElement: {
        prototype: HTMLAmalitechSelectOptionElement;
        new (): HTMLAmalitechSelectOptionElement;
    };
    interface HTMLAmalitechSelectSingleElement extends Components.AmalitechSelectSingle, HTMLStencilElement {
    }
    var HTMLAmalitechSelectSingleElement: {
        prototype: HTMLAmalitechSelectSingleElement;
        new (): HTMLAmalitechSelectSingleElement;
    };
    interface HTMLAmalitechSnackbarElementEventMap {
        "closed": any;
    }
    interface HTMLAmalitechSnackbarElement extends Components.AmalitechSnackbar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechSnackbarElementEventMap>(type: K, listener: (this: HTMLAmalitechSnackbarElement, ev: AmalitechSnackbarCustomEvent<HTMLAmalitechSnackbarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechSnackbarElementEventMap>(type: K, listener: (this: HTMLAmalitechSnackbarElement, ev: AmalitechSnackbarCustomEvent<HTMLAmalitechSnackbarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechSnackbarElement: {
        prototype: HTMLAmalitechSnackbarElement;
        new (): HTMLAmalitechSnackbarElement;
    };
    interface HTMLAmalitechStarRatingElementEventMap {
        "amalitechRatingChange": number;
    }
    interface HTMLAmalitechStarRatingElement extends Components.AmalitechStarRating, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechStarRatingElementEventMap>(type: K, listener: (this: HTMLAmalitechStarRatingElement, ev: AmalitechStarRatingCustomEvent<HTMLAmalitechStarRatingElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechStarRatingElementEventMap>(type: K, listener: (this: HTMLAmalitechStarRatingElement, ev: AmalitechStarRatingCustomEvent<HTMLAmalitechStarRatingElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechStarRatingElement: {
        prototype: HTMLAmalitechStarRatingElement;
        new (): HTMLAmalitechStarRatingElement;
    };
    interface HTMLAmalitechSwitchElementEventMap {
        "amalitechSwitchChange": Record<string, string | boolean>;
    }
    /**
     * The switch component is a wrapper around the native checkbox element.
     */
    interface HTMLAmalitechSwitchElement extends Components.AmalitechSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechSwitchElementEventMap>(type: K, listener: (this: HTMLAmalitechSwitchElement, ev: AmalitechSwitchCustomEvent<HTMLAmalitechSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechSwitchElementEventMap>(type: K, listener: (this: HTMLAmalitechSwitchElement, ev: AmalitechSwitchCustomEvent<HTMLAmalitechSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechSwitchElement: {
        prototype: HTMLAmalitechSwitchElement;
        new (): HTMLAmalitechSwitchElement;
    };
    interface HTMLAmalitechTabElement extends Components.AmalitechTab, HTMLStencilElement {
    }
    var HTMLAmalitechTabElement: {
        prototype: HTMLAmalitechTabElement;
        new (): HTMLAmalitechTabElement;
    };
    interface HTMLAmalitechTabPanelElement extends Components.AmalitechTabPanel, HTMLStencilElement {
    }
    var HTMLAmalitechTabPanelElement: {
        prototype: HTMLAmalitechTabPanelElement;
        new (): HTMLAmalitechTabPanelElement;
    };
    interface HTMLAmalitechTimePickerElementEventMap {
        "amalitechTimeChange": Partial<Record<'time' | 'hour' | 'minute' | 'meridian' | 'second', string>> | Date;
        "amalitechTimeClear": void;
    }
    interface HTMLAmalitechTimePickerElement extends Components.AmalitechTimePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechTimePickerElementEventMap>(type: K, listener: (this: HTMLAmalitechTimePickerElement, ev: AmalitechTimePickerCustomEvent<HTMLAmalitechTimePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechTimePickerElementEventMap>(type: K, listener: (this: HTMLAmalitechTimePickerElement, ev: AmalitechTimePickerCustomEvent<HTMLAmalitechTimePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechTimePickerElement: {
        prototype: HTMLAmalitechTimePickerElement;
        new (): HTMLAmalitechTimePickerElement;
    };
    interface HTMLAmalitechTreeElement extends Components.AmalitechTree, HTMLStencilElement {
    }
    var HTMLAmalitechTreeElement: {
        prototype: HTMLAmalitechTreeElement;
        new (): HTMLAmalitechTreeElement;
    };
    interface HTMLAmalitechTreeNodeElementEventMap {
        "tree:tree-node-click": any;
    }
    interface HTMLAmalitechTreeNodeElement extends Components.AmalitechTreeNode, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechTreeNodeElementEventMap>(type: K, listener: (this: HTMLAmalitechTreeNodeElement, ev: AmalitechTreeNodeCustomEvent<HTMLAmalitechTreeNodeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechTreeNodeElementEventMap>(type: K, listener: (this: HTMLAmalitechTreeNodeElement, ev: AmalitechTreeNodeCustomEvent<HTMLAmalitechTreeNodeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechTreeNodeElement: {
        prototype: HTMLAmalitechTreeNodeElement;
        new (): HTMLAmalitechTreeNodeElement;
    };
    interface HTMLAmalitechValidationElementEventMap {
        "amalitechClose": void;
    }
    /**
     * Amalitech Form Validation Feedback Component
     */
    interface HTMLAmalitechValidationElement extends Components.AmalitechValidation, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechValidationElementEventMap>(type: K, listener: (this: HTMLAmalitechValidationElement, ev: AmalitechValidationCustomEvent<HTMLAmalitechValidationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechValidationElementEventMap>(type: K, listener: (this: HTMLAmalitechValidationElement, ev: AmalitechValidationCustomEvent<HTMLAmalitechValidationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechValidationElement: {
        prototype: HTMLAmalitechValidationElement;
        new (): HTMLAmalitechValidationElement;
    };
    interface HTMLAmalitechVisualPickerElementEventMap {
        "pickerChange": {
    value: string | string[];
  };
    }
    interface HTMLAmalitechVisualPickerElement extends Components.AmalitechVisualPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechVisualPickerElementEventMap>(type: K, listener: (this: HTMLAmalitechVisualPickerElement, ev: AmalitechVisualPickerCustomEvent<HTMLAmalitechVisualPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechVisualPickerElementEventMap>(type: K, listener: (this: HTMLAmalitechVisualPickerElement, ev: AmalitechVisualPickerCustomEvent<HTMLAmalitechVisualPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechVisualPickerElement: {
        prototype: HTMLAmalitechVisualPickerElement;
        new (): HTMLAmalitechVisualPickerElement;
    };
    interface HTMLAmalitechVisualPickerItemElementEventMap {
        "selection": Record<string, boolean>;
    }
    interface HTMLAmalitechVisualPickerItemElement extends Components.AmalitechVisualPickerItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmalitechVisualPickerItemElementEventMap>(type: K, listener: (this: HTMLAmalitechVisualPickerItemElement, ev: AmalitechVisualPickerItemCustomEvent<HTMLAmalitechVisualPickerItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmalitechVisualPickerItemElementEventMap>(type: K, listener: (this: HTMLAmalitechVisualPickerItemElement, ev: AmalitechVisualPickerItemCustomEvent<HTMLAmalitechVisualPickerItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmalitechVisualPickerItemElement: {
        prototype: HTMLAmalitechVisualPickerItemElement;
        new (): HTMLAmalitechVisualPickerItemElement;
    };
    interface HTMLElementTagNameMap {
        "amalitech-accordion": HTMLAmalitechAccordionElement;
        "amalitech-alert": HTMLAmalitechAlertElement;
        "amalitech-alert-content": HTMLAmalitechAlertContentElement;
        "amalitech-breadcrumb": HTMLAmalitechBreadcrumbElement;
        "amalitech-breadcrumb-item": HTMLAmalitechBreadcrumbItemElement;
        "amalitech-button": HTMLAmalitechButtonElement;
        "amalitech-card": HTMLAmalitechCardElement;
        "amalitech-checkbox": HTMLAmalitechCheckboxElement;
        "amalitech-data-table": HTMLAmalitechDataTableElement;
        "amalitech-date-picker": HTMLAmalitechDatePickerElement;
        "amalitech-docked-utility-bar": HTMLAmalitechDockedUtilityBarElement;
        "amalitech-docked-utility-body": HTMLAmalitechDockedUtilityBodyElement;
        "amalitech-docked-utility-item": HTMLAmalitechDockedUtilityItemElement;
        "amalitech-input": HTMLAmalitechInputElement;
        "amalitech-map": HTMLAmalitechMapElement;
        "amalitech-modal": HTMLAmalitechModalElement;
        "amalitech-nav-item": HTMLAmalitechNavItemElement;
        "amalitech-nav-mobile": HTMLAmalitechNavMobileElement;
        "amalitech-navbar": HTMLAmalitechNavbarElement;
        "amalitech-pagination": HTMLAmalitechPaginationElement;
        "amalitech-progress": HTMLAmalitechProgressElement;
        "amalitech-progress-bar": HTMLAmalitechProgressBarElement;
        "amalitech-progress-ring": HTMLAmalitechProgressRingElement;
        "amalitech-radio-button": HTMLAmalitechRadioButtonElement;
        "amalitech-radio-group": HTMLAmalitechRadioGroupElement;
        "amalitech-select": HTMLAmalitechSelectElement;
        "amalitech-select-multiple": HTMLAmalitechSelectMultipleElement;
        "amalitech-select-option": HTMLAmalitechSelectOptionElement;
        "amalitech-select-single": HTMLAmalitechSelectSingleElement;
        "amalitech-snackbar": HTMLAmalitechSnackbarElement;
        "amalitech-star-rating": HTMLAmalitechStarRatingElement;
        "amalitech-switch": HTMLAmalitechSwitchElement;
        "amalitech-tab": HTMLAmalitechTabElement;
        "amalitech-tab-panel": HTMLAmalitechTabPanelElement;
        "amalitech-time-picker": HTMLAmalitechTimePickerElement;
        "amalitech-tree": HTMLAmalitechTreeElement;
        "amalitech-tree-node": HTMLAmalitechTreeNodeElement;
        "amalitech-validation": HTMLAmalitechValidationElement;
        "amalitech-visual-picker": HTMLAmalitechVisualPickerElement;
        "amalitech-visual-picker-item": HTMLAmalitechVisualPickerItemElement;
    }
}
declare namespace LocalJSX {
    interface AmalitechAccordion {
        /**
          * Indicates whether the accordion is animated or not.
         */
        "animated"?: boolean;
        /**
          * The description or content to be displayed when the accordion is expanded.
         */
        "description"?: string;
        /**
          * The label for the accordion button.
         */
        "label"?: string;
        /**
          * Event emitted when the accordion is toggled.
         */
        "onToggle"?: (event: AmalitechAccordionCustomEvent<any>) => void;
    }
    interface AmalitechAlert {
        "name"?: string;
        /**
          * position of the alert
         */
        "position"?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
    }
    interface AmalitechAlertContent {
        "actionLabel"?: string;
        "actionName"?: string;
        "actionable"?: boolean;
        /**
          * renders a close button to close the alert
         */
        "dismissible"?: boolean;
        /**
          * enables the high contrast color scheme
         */
        "highContrast"?: boolean;
        /**
          * dismiss alert event
         */
        "onAlert:alert-content-dismiss"?: (event: AmalitechAlertContentCustomEvent<any>) => void;
        /**
          * type of alert to be shown
         */
        "state"?: 'success' | 'error' | 'info' | 'warning';
    }
    interface AmalitechBreadcrumb {
        /**
          * Alignment of the breadcrumb items.
         */
        "align"?: 'left' | 'right' | 'center';
        /**
          * Separator between the breadcrumb items.
         */
        "separator"?: 'dot' | 'arrow' | 'slash';
        /**
          * Size of the breadcrumb items.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface AmalitechBreadcrumbItem {
        /**
          * Indicates whether the breadcrumb item is the current page's item.
         */
        "active"?: boolean;
        /**
          * The URL to navigate to when the breadcrumb item is clicked.
         */
        "href"?: string | undefined;
        /**
          * The target of the breadcrumb item link. Only applies when an `href` is provided.
         */
        "target"?: string | undefined;
    }
    /**
     * The Button component is a wrapper for the native button element with custom styling and variations.
     */
    interface AmalitechButton {
        /**
          * The disabled state of the button. If set to true, interactions would not be alowed, color will also change
         */
        "disabled"?: boolean;
        /**
          * Position of an icon in the button, default set to right
         */
        "iconPosition"?: 'left' | 'right';
        /**
          * (optional) Any aria label
         */
        "innerAriaLabel"?: string;
        /**
          * The tabindex of the inner button element
         */
        "innerTabIndex"?: number;
        /**
          * (optional) Any name of the button element
         */
        "name"?: string;
        /**
          * Size of the button
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The type attribute of the button
         */
        "type"?: 'button' | 'reset' | 'submit';
        /**
          * (optional) Any value of the button element
         */
        "value"?: string;
        /**
          * The color of the button, default is 'default'
         */
        "variant"?: Colors;
    }
    interface AmalitechCard {
        /**
          * The disabled state of the card. If set to true, interactions would not be alowed,
         */
        "disabled"?: boolean;
        /**
          * The href attribute of the card. If set, the card would render as an anchor tag.
         */
        "href"?: string;
        /**
          * The target attribute of the card. If href is set, the target defaults to _blank
         */
        "target"?: string;
        /**
          * The hover animation state of the card. If set to true, the card would have a hover animation.
         */
        "withHoverAnimation"?: boolean;
    }
    /**
     * Checkbox is an extension to the standard checkbox element with theming.
     */
    interface AmalitechCheckbox {
        /**
          * Inline style of the component.
         */
        "anyStyle"?: any;
        /**
          * Index of the element in tabbing order
         */
        "anyTabIndex"?: number;
        /**
          * Allows to select a boolean value instead of multiple values.
         */
        "binary"?: boolean;
        /**
          * Icon class of the checkbox icon.
         */
        "checkboxIcon"?: string;
        /**
          * If `true`, the checkbox is selected.
         */
        "checked"?: boolean;
        /**
          * When present, it specifies that the element should be disabled.
         */
        "disabled"?: boolean;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId"?: string;
        /**
          * Label of the checkbox.
         */
        "label"?: string;
        /**
          * Style class of the label.
         */
        "labelStyleClass"?: any;
        /**
          * Name of the checkbox group.
         */
        "name"?: string;
        /**
          * Emitted when the toggle loses focus.
         */
        "onAOnBlur"?: (event: AmalitechCheckboxCustomEvent<any>) => void;
        /**
          * Emitted when the toggle has focus.
         */
        "onAOnFocus"?: (event: AmalitechCheckboxCustomEvent<any>) => void;
        /**
          * Callback to invoke when value of dropdown changes.
         */
        "onValueChange"?: (event: AmalitechCheckboxCustomEvent<any>) => void;
        /**
          * When present, it specifies that the component cannot be edited.
         */
        "readonly"?: boolean;
        /**
          * Style class of the component.
         */
        "styleClass"?: any;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value"?: any;
    }
    interface AmalitechDataTable {
        /**
          * actions to be performed on each row [{  'icon': '<svg></svg>',  'callback': () => {},  }]
         */
        "actions"?: Action[];
        /**
          * Columns configuration. [ {   "name":"name",   "label":"Name",   "width":300,   "fixed":true,   "template": function(row, column) { return row[column.name];}  }, {   "name":"age",   "label":"Age" } ]
         */
        "columns"?: any[];
        /**
          * Data to display on table [{  'id': '5',  'age': 21,  'name': 'John',  'company': 'India',  'email': 'john@example.com',  'phone': '+23356977855',  'address': '326 Irving Street, Ghana'  }]
         */
        "data"?: any[];
        /**
          * Description text to display when the table is empty.
          * @default 'There are no items to display'
         */
        "emptyStateDescription"?: string;
        /**
          * Headline text to display when the table is empty.
          * @default 'No items'
         */
        "emptyStateHeadline"?: string;
        /**
          * Alignment of the table header ('center', 'left', or 'right').
          * @default 'left'
         */
        "headerAlignment"?: 'center' | 'left' | 'right';
        /**
          * Key field to uniquely identify each row.
          * @default 'id'
         */
        "keyField"?: string;
        "managed"?: boolean;
        /**
          * Emitted when a cell is clicked.
          * @event table:table-cell-click
          * @property {Object} detail - The event detail.
          * @property {Object} detail.record - The clicked row.
          * @property {Object} detail.column - The clicked column.
          * @property {boolean} detail.altKey - Whether the Alt key was pressed during the click.
          * @property {boolean} detail.ctrlKey - Whether the Ctrl key was pressed during the click.
          * @property {boolean} detail.metaKey - Whether the Meta key was pressed during the click.
          * @property {boolean} detail.shiftKey - Whether the Shift key was pressed during the click.
         */
        "onTable:table-cell-click"?: (event: AmalitechDataTableCustomEvent<any>) => void;
        /**
          * Emitted when pagination is changed.
          * @event table:table-page
          * @property {Object} detail - The event detail.
          * @property {number} detail.page - The current page number.
          * @property {number} detail.pageSize - The number of items per page.
         */
        "onTable:table-page"?: (event: AmalitechDataTableCustomEvent<any>) => void;
        /**
          * Emitted when the selection changes.
          * @event table:table-select-change
          * @property {Object} detail - The event detail.
          * @property {string[]} detail.value - The keys of selected rows.
          * @property {boolean} detail.isSelectAll - Whether all rows are selected.
         */
        "onTable:table-select-change"?: (event: AmalitechDataTableCustomEvent<any>) => void;
        /**
          * Emitted when sorting is applied to the table.
          * @event table:table-sort
          * @property {Object} detail - The event detail.
          * @property {string} detail.sortBy - The column name to sort by.
          * @property {'asc' | 'desc'} detail.sortOrder - The sorting order ('asc' or 'desc').
         */
        "onTable:table-sort"?: (event: AmalitechDataTableCustomEvent<any>) => void;
        "page"?: number;
        /**
          * changes the amount of items on each page | pagination
         */
        "pageSize"?: number;
        /**
          * add pagination to the page
         */
        "paginate"?: boolean;
        /**
          * Selected row keys.
         */
        "selectedRowKeys"?: string[];
        /**
          * Type of selection ('checkbox' or undefined).
         */
        "selectionType"?: 'checkbox' | undefined;
        /**
          * sortable string
         */
        "sortBy"?: string;
        /**
          * changes the sort direction
         */
        "sortOrder"?: 'asc' | 'desc';
        /**
          * makes the table data sortable
         */
        "sortable"?: boolean;
        /**
          * Total number of items in the data set.
          * @default undefined
         */
        "totalItems"?: any;
    }
    interface AmalitechDatePicker {
        /**
          * The disabled state of the date picker
         */
        "disabled"?: boolean;
        /**
          * The first day of the week, 0 for Sunday and 1 for Monday
         */
        "firstDayOfWeek"?: '0' | '1';
        /**
          * The icon position of the date picker, either `left` or `right`, default is `right`
         */
        "iconPosition"?: 'left' | 'right';
        /**
          * The label of the date picker
         */
        "label"?: string;
        /**
          * The maximum date that a user can select in the format `YYYY-MM-DD`
         */
        "max"?: string | undefined;
        /**
          * The minimum date that a user can select in the format `YYYY-MM-DD`
         */
        "min"?: string | undefined;
        /**
          * The date change event that is emitted when the date changes
         */
        "onAmalitechDateChange"?: (event: AmalitechDatePickerCustomEvent<string | Date>) => void;
        /**
          * The date clear event is emitted when the date selection is cleared
         */
        "onAmalitechDateClear"?: (event: AmalitechDatePickerCustomEvent<void>) => void;
        /**
          * The output format of the date picker, either `YYYY-MM-DD` or `DD-MM-YYYY`, default is `YYYY-MM-DD`
         */
        "outputFormat"?: 'YYYY-MM-DD' | 'DD-MM-YYYY';
        /**
          * The output type of the date picker, either `string` or `date`, default is `string`
         */
        "outputType"?: 'string' | 'date';
        /**
          * The value of the date picker in the format `YYYY-MM-DD`
         */
        "value"?: string | undefined;
    }
    interface AmalitechDockedUtilityBar {
    }
    interface AmalitechDockedUtilityBody {
        /**
          * The name attribute should match the content attribute placed on an `amalitech-docked-utility-item` element to indicate that the body is associated with that item.
         */
        "name"?: string;
    }
    interface AmalitechDockedUtilityItem {
        /**
          * The content attribute should match the name attribute placed on an `amalitech-docked-utility-body` element to indicate that the body is associated with this item.
         */
        "content"?: string;
    }
    /**
     * The Input component is a wrapper to the HTML input element with custom styling and additional
     * functionality.
     */
    interface AmalitechInput {
        /**
          * Title text of the input text.
         */
        "aTitle"?: string;
        /**
          * Used to indicate that user input is required on an element before a form can be submitted.
         */
        "anyAriaRequired"?: boolean;
        /**
          * Specifies tab order of the element.
         */
        "anyTabIndex"?: string;
        /**
          * (optional) id or space separated list of ids of elements that provide or link to additional related information.
         */
        "ariaDetailedId"?: string;
        /**
          * Used to define a string that autocomplete attribute the current element.
         */
        "autocomplete"?: string;
        /**
          * (optional) the input should automatically get focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * When present, it specifies that the element should be disabled
         */
        "disabled"?: boolean;
        /**
          * When enabled, the label will have floating effect on input text focus
         */
        "floatLabel"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * Inline style of the element
         */
        "inputClass"?: any;
        /**
          * The class of input holder element
         */
        "inputHolderClass"?: any;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId"?: string;
        /**
          * Inline style of the input element
         */
        "inputStyle"?: any;
        /**
          * The class of input wrapper element
         */
        "inputWrapperClass"?: any;
        /**
          * Label of the input text
         */
        "label"?: string;
        /**
          * The class of left icon wrapper element
         */
        "leftIconClass"?: any;
        /**
          * (optional) input list
         */
        "list"?: string;
        /**
          * (optional) define the numeric maximum value of input types such as month, date, time
         */
        "max"?: number;
        /**
          * Maximum number of character allows in the input field.
         */
        "maxLength"?: number;
        /**
          * (optional) defines the numeric minimum value of input types such as month, date, time
         */
        "min"?: number;
        /**
          * (optional) Input text string min length
         */
        "minLength"?: number;
        /**
          * Name of the input text.
         */
        "name"?: string;
        /**
          * Callback to invoke when value of input text changes
         */
        "onValueChange"?: (event: AmalitechInputCustomEvent<any>) => void;
        /**
          * Regular expression for input field
         */
        "pattern"?: string;
        /**
          * Default text to display when no value in input text
         */
        "placeholder"?: string;
        /**
          * When present, it specifies that the element value cannot be changed
         */
        "readonly"?: boolean;
        /**
          * When present, it specifies that an input field is required.
         */
        "required"?: boolean;
        /**
          * Size of the input field.
         */
        "size"?: number;
        /**
          * Inline style for the entire element
         */
        "styles"?: string;
        /**
          * Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'date'
    | 'month' // example yyyy-mm
    | 'week' // example yyyy-W##
    | 'time' // example hh:mm
    | 'datetime-local' // example yyyy-mm-ddThh:mm
    | 'url';
        /**
          * Value of the input text
         */
        "value"?: string;
    }
    interface AmalitechMap {
        /**
          * Sets the height of the map
         */
        "height"?: string;
        /**
          * If set to true, hides the list of nearby landmarks
         */
        "hideNearByList"?: boolean;
        /**
          * Specifies the icon url
         */
        "iconUrl"?: string;
        /**
          * Specifies the latitude value
         */
        "latitude"?: number;
        /**
          * Specifies the longitude value
         */
        "longitude"?: number;
        /**
          * Adds a name to be shown in the popup
         */
        "name"?: string;
        /**
          * Sets the width of the map
         */
        "width"?: string;
        /**
          * Sets the zoom level of the map
         */
        "zoom"?: number;
    }
    /**
     * The modal component is a custom element used to display content in a layer above the app.
     * it comes with default text for cancel and confirm buttons but can be customized with
     * @prop confirmText
     * @prop cancelText
     */
    interface AmalitechModal {
        /**
          * Text to show for cancel
         */
        "cancelText"?: string;
        /**
          * The customization for close button
         */
        "closeButtonType"?: 'arms' | 'x' | 'x-rounded' | 'rounded' | 'square';
        /**
          * Text to show for confirmation
         */
        "confirmText"?: string;
        /**
          * Whether to show the confirmation only variant
         */
        "confirmation"?: boolean;
        /**
          * Event is emmitted when user clicks on cancel button or close button
         */
        "onAmalitechCancel"?: (event: AmalitechModalCustomEvent<void>) => void;
        /**
          * Event is emmited when a user clicks on confirm button
         */
        "onAmalitechConfirm"?: (event: AmalitechModalCustomEvent<void>) => void;
        /**
          * Make the modal scrollable/full screen
         */
        "scrollable"?: boolean;
        /**
          * Show or hide modal
         */
        "visible"?: boolean;
    }
    interface AmalitechNavItem {
        /**
          * Whether the nav item is active or not
         */
        "active"?: boolean;
        /**
          * Whether the nav item is disabled
         */
        "disabled"?: boolean;
        /**
          * Event emitted when the nav item is clicked
         */
        "onSwitch"?: (event: AmalitechNavItemCustomEvent<void>) => void;
    }
    interface AmalitechNavMobile {
        /**
          * The alignment of the mobile dropdown trigger icon. Defaults to `left`
         */
        "align"?: 'left' | 'right';
    }
    /**
     * This navbar component is designed to be used with child `amalitech-nav-item` components.
     */
    interface AmalitechNavbar {
        /**
          * The layout of the navbar. Defaults to `1` aka: "logo | nav | search"
         */
        "layout"?: 'nav-items-center' | 'nav-items-right' | 'nav-items-left';
        /**
          * The alignment of the mobile dropdown trigger icon. Defaults to `right`
         */
        "mobileIconAlign"?: 'left' | 'right';
    }
    interface AmalitechPagination {
        /**
          * The number of items per page
         */
        "limitNumber"?: number;
        /**
          * This event is emmitted with the selected page number when the page changes
         */
        "onAmalitechPageChange"?: (event: AmalitechPaginationCustomEvent<number>) => void;
        /**
          * The current page number
         */
        "pageNumber"?: number;
        /**
          * The number of siblings to show in +2 increments before ellipses. eg: `1 = 5, 2 = 7, 3 = 9`
         */
        "siblings"?: number;
        /**
          * The size of the pagination component
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The total number of items in the data set
         */
        "totalItems"?: number;
        /**
          * (optional) The total number of pages if you do not want the component to handle calculating the total pages based on the total items and limit number
         */
        "totalPagesCount"?: number;
    }
    interface AmalitechProgress {
        /**
          * Only present and required if the value is not indeterminate. Set to a decimal value between 0, or valuemin if present, and max-value indicating the current value of the progress bar.
         */
        "currentValue"?: number;
        /**
          * Used to show indeterminate or pending progress state.
         */
        "indeterminate"?: boolean;
        /**
          * Defines the string value or identifies the element (or elements) that label the progressbar element providing an accessible name.
         */
        "labeledBy"?: string;
        /**
          * Set to a decimal value representing the maximum value, and greater than min-value. If not present, the default value is 100.
         */
        "maxValue"?: number;
        /**
          * Set to a decimal value representing the minimum value, and less than max-value. If not present, the default value is 0.
         */
        "minValue"?: number;
        /**
          * Divides progress bar in multiple progress steps.
         */
        "steps"?: boolean;
        /**
          * Assistive technologies often present the value of current-value as a percentage. If this would not be accurate use this property to make the progress bar value understandable.
         */
        "valueText"?: string;
    }
    interface AmalitechProgressBar {
        /**
          * Provide a hint to the user of what's happening.
         */
        "helperText"?: string;
        /**
          * Hides the label.
         */
        "hideLabel"?: boolean;
        /**
          * Hides the value.
         */
        "hideValue"?: boolean;
        /**
          * If `true`, the progress bar will be displayed as an indeterminate progress bar.
         */
        "indeterminate"?: boolean;
        /**
          * A label describing the progress bar.
         */
        "label"?: string;
        /**
          * The maximum value.
         */
        "maximumValue"?: number;
        /**
          * The minimum value.
         */
        "minimumValue"?: number;
        /**
          * Possible values are: `"sm"`, `"lg"` and `"md"` in pixel. Defaults to `"sm"`.
         */
        "size"?: 'sm' | 'md' | 'lg';
        /**
          * The status of the progress bar.
         */
        "status"?: 'active' | 'success' | 'error';
        /**
          * The current value.
         */
        "value"?: number;
    }
    interface AmalitechProgressRing {
        /**
          * If the progress ring should be indeterminate.
         */
        "indeterminate"?: boolean;
        /**
          * The color of the background of the progress ring, in any CSS valid format.
         */
        "outlineColor"?: string;
        /**
          * The current progress value in percentage.
         */
        "progress"?: number;
        /**
          * The color of the progress ring, in any CSS valid format.
         */
        "progressColor"?: string;
        /**
          * The text to display inside the progress ring.
         */
        "progressText"?: string;
        /**
          * The radius of the progress ring in px.
         */
        "radius"?: number;
        /**
          * The stroke width of the progress ring in px.
         */
        "stroke"?: number;
    }
    interface AmalitechRadioButton {
        /**
          * Inline style of the component.
         */
        "anyStyle"?: any;
        /**
          * Index of the element in tabbing order
         */
        "anyTabIndex"?: number;
        /**
          * When present, it specifies that the element should be disabled.
         */
        "disabled"?: boolean;
        /**
          * If `true`, the radio button has a double border.
         */
        "doubleBorder"?: boolean;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId"?: string;
        /**
          * Label of the radiobutton.
         */
        "label"?: string;
        /**
          * Style class of the label.
         */
        "labelStyleClass"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Callback to invoke when the radio button loses focus.
         */
        "onAOnBlur"?: (event: AmalitechRadioButtonCustomEvent<any>) => void;
        /**
          * Callback to invoke when the radio button receives focus.
         */
        "onAOnFocus"?: (event: AmalitechRadioButtonCustomEvent<any>) => void;
        /**
          * Callback to invoke on radio button select.
         */
        "onAOnSelect"?: (event: AmalitechRadioButtonCustomEvent<any>) => void;
        /**
          * Style class of the component.
         */
        "styleClass"?: any;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface AmalitechRadioGroup {
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onValueChange"?: (event: AmalitechRadioGroupCustomEvent<RadioGroupChangeEventDetail>) => void;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    /**
     * The Select component is a custom element designed to be used with child select-option elements.
     */
    interface AmalitechSelect {
        /**
          * If true, the user cannot interact with the select component.
         */
        "disabled"?: boolean;
        /**
          * The label of the select component eg: 'Select a fruit' or 'Select a car'
         */
        "label"?: string;
        /**
          * If true, the user can select multiple options at once.
         */
        "multiple"?: boolean;
        /**
          * This event emmits the value of the selected option or an array of values if option is multiple
         */
        "onAmalitechChange"?: (event: AmalitechSelectCustomEvent<Record<string, string | string[]>>) => void;
        /**
          * Toggles the open state of the dropdown
         */
        "open"?: boolean;
        /**
          * If true, the select component will be required
         */
        "required"?: boolean;
        /**
          * If true, the dropdown will be scrollable
         */
        "scrollable"?: boolean;
        /**
          * The style to be applied when items are checked
         */
        "selectedStyle"?: 'checkmark' | 'checkRounded' | 'dot';
    }
    interface AmalitechSelectMultiple {
        /**
          * If true, the user cannot interact with the select component.
         */
        "disabled"?: boolean;
        /**
          * The label of the select component eg: 'Select a fruit' or 'Select a car'
         */
        "label"?: string;
        /**
          * This event is triggered when a selection is removed
         */
        "onMultiDeselection"?: (event: AmalitechSelectMultipleCustomEvent<{
    value: string;
    textContent: string;
  }>) => void;
        /**
          * Toggles the open state of the dropdown
         */
        "open"?: boolean;
        /**
          * If true, the select component will be required
         */
        "required"?: boolean;
        /**
          * If true, the dropdown will be scrollable
         */
        "scrollable"?: boolean;
        /**
          * The state of the select component eg: 'single' or 'multiple'
         */
        "state"?: 'single' | 'multiple';
    }
    /**
     * The select option component is designed to be nested within a select component.
     */
    interface AmalitechSelectOption {
        /**
          * If true, the user cannot interact with the option
         */
        "disabled"?: boolean;
        "onClearEvent"?: (event: AmalitechSelectOptionCustomEvent<void>) => void;
        /**
          * This event is triggered when a selection is removed
         */
        "onDeselection"?: (event: AmalitechSelectOptionCustomEvent<{
    value: string;
    textContent: string;
  }>) => void;
        /**
          * This event is triggered when a selection is made
         */
        "onSelection"?: (event: AmalitechSelectOptionCustomEvent<{
    value: string;
    textContent: string;
  }>) => void;
        /**
          * If true, the option is selected
         */
        "selected"?: boolean;
        /**
          * The style to be applied when items are checked
         */
        "selectedStyle"?: 'checkmark' | 'checkRounded' | 'dot';
        /**
          * The value of the option
         */
        "value"?: string;
    }
    interface AmalitechSelectSingle {
        /**
          * If true, the user cannot interact with the select component.
         */
        "disabled"?: boolean;
        /**
          * The label of the select component eg: 'Select a fruit' or 'Select a car'
         */
        "label"?: string;
        /**
          * Toggles the open state of the dropdown
         */
        "open"?: boolean;
        /**
          * If true, the select component will be required
         */
        "required"?: boolean;
        /**
          * If true, the dropdown will be scrollable
         */
        "scrollable"?: boolean;
        /**
          * The state of the select component eg: 'single' or 'multiple'
         */
        "state"?: 'single' | 'multiple';
    }
    interface AmalitechSnackbar {
        /**
          * Auto Close Enables the auto close functionality
         */
        "autoClose"?: boolean;
        /**
          * Call To Action Text Sets the call-to-action text
         */
        "callToActionText"?: string;
        /**
          * Sets the duration before the snackbar closes
         */
        "closeSecs"?: number;
        /**
          * Closeable Shows a close button if true
         */
        "closeable"?: boolean;
        /**
          * href attribute Sets the url of the snackbar
         */
        "href"?: string;
        /**
          * This event is emitted when the close button is clicked
         */
        "onClosed"?: (event: AmalitechSnackbarCustomEvent<any>) => void;
        /**
          * Rounded Sets the border radius of the snackbar to round or square
         */
        "rounded"?: boolean;
        /**
          * Snackbar text Sets the Snackbar text
         */
        "snackbarText"?: string;
        /**
          * target attribute specifies how to open the url of the snackbar
         */
        "target"?: string;
    }
    interface AmalitechStarRating {
        /**
          * If true, the star rating will show a variant that animates on render
         */
        "animated"?: boolean;
        /**
          * The number of stars to display
         */
        "count"?: number;
        /**
          * Indicates the disabled state of the component
         */
        "disabled"?: boolean;
        /**
          * If true, the user cannot hover over the star rating
         */
        "hoverDisabled"?: boolean;
        /**
          * The event emmitted when the star rating is changed or a selection is made
         */
        "onAmalitechRatingChange"?: (event: AmalitechStarRatingCustomEvent<number>) => void;
        /**
          * If true, the user cannot interact with the star rating
         */
        "readonly"?: boolean;
        /**
          * The size of the star rating
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The color of the star rating stroke, default is `#474d66`
         */
        "strokeColor"?: string;
        /**
          * The value of the star rating
         */
        "value"?: number;
    }
    /**
     * The switch component is a wrapper around the native checkbox element.
     */
    interface AmalitechSwitch {
        /**
          * The whether the component is checked or not
         */
        "checked"?: boolean;
        /**
          * The whether the component is disabled or not
         */
        "disabled"?: boolean;
        /**
          * The name attribute of the underlying checkbox element
         */
        "name"?: string | undefined;
        /**
          * The event that is emitted when the component is clicked
         */
        "onAmalitechSwitchChange"?: (event: AmalitechSwitchCustomEvent<Record<string, string | boolean>>) => void;
        /**
          * The size of the switch component
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The id of the underlying checkbox element
         */
        "switchId"?: string | undefined;
        /**
          * The value attribute of the underlying checkbox element
         */
        "value"?: string | undefined;
    }
    interface AmalitechTab {
        /**
          * Index of the active tab to change selected tab programmatically.
         */
        "activeIndex"?: number;
        /**
          * Inline style of the component.
         */
        "anyStyle"?: any;
        /**
          * Style class of the component.
         */
        "styleClass"?: any;
    }
    interface AmalitechTabPanel {
        /**
          * When true, tab cannot be activated.
         */
        "disabled"?: boolean;
        /**
          * Defines if tab is active.
         */
        "selected"?: boolean;
        /**
          * Title of the tabPanel.
         */
        "tabName"?: string | null;
    }
    interface AmalitechTimePicker {
        /**
          * The label of the time picker
         */
        "label"?: string;
        /**
          * The maximum time that can be selected in the format `00:00`
         */
        "max"?: string | undefined;
        /**
          * If true, time picker will be in 12 hour format
         */
        "meridian"?: boolean;
        /**
          * The minimum time that can be selected in the format `00:00`
         */
        "min"?: string | undefined;
        /**
          * This event emmits the value of the selected time in the format {time: '00:00 AM', hour: '00', minute: '00', meridian: 'AM'}
         */
        "onAmalitechTimeChange"?: (event: AmalitechTimePickerCustomEvent<Partial<Record<'time' | 'hour' | 'minute' | 'meridian' | 'second', string>> | Date>) => void;
        /**
          * This event is emitted when the time picker value is cleared
         */
        "onAmalitechTimeClear"?: (event: AmalitechTimePickerCustomEvent<void>) => void;
        /**
          * The format of the time picker event detail
         */
        "outputFormat"?: 'string' | 'date';
        /**
          * If true, the time picker will show a required state
         */
        "required"?: boolean;
        /**
          * If true, time picker will show seconds
         */
        "seconds"?: boolean;
        /**
          * The size of the time picker
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The current value of the time picker in the format `00:00`
         */
        "value"?: string | undefined;
    }
    interface AmalitechTree {
        /**
          * To be shown when no node is rendered
         */
        "emptyState"?: string;
        /**
          * selects a node at default
         */
        "selectedNode"?: string;
    }
    interface AmalitechTreeNode {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        /**
          * reflects the expanded state
         */
        "expanded"?: boolean;
        /**
          * Hyperlink to navigate to on click.
         */
        "href"?: string;
        /**
          * label
         */
        "label"?: string;
        "level"?: number;
        /**
          * Emitted when the menu item is clicked.
         */
        "onTree:tree-node-click"?: (event: AmalitechTreeNodeCustomEvent<any>) => void;
        /**
          * Menu item selection state.
         */
        "selectedNode"?: string;
        /**
          * The menu item value.
         */
        "value"?: string | number | null;
    }
    /**
     * Amalitech Form Validation Feedback Component
     */
    interface AmalitechValidation {
        /**
          * Whether to automatically close the feedback component. Default duration is 5s
         */
        "autoClose"?: boolean;
        /**
          * The type of close button to show
         */
        "closeButtonType"?: 'arms' | 'x' | 'x-rounded' | 'square' | 'none';
        /**
          * The number of seconds before closing the feedback component
         */
        "closeSecs"?: string | undefined;
        /**
          * This event is emmitted when the close button is clicked
         */
        "onAmalitechClose"?: (event: AmalitechValidationCustomEvent<void>) => void;
        /**
          * The style of feedback component when opening and closing
         */
        "transition"?: 'toast' | 'opacity' | 'none';
        /**
          * The variant of validation feedback to show
         */
        "variant"?: 'success' | 'error' | 'warning';
    }
    interface AmalitechVisualPicker {
        /**
          * Specifies the direction of the visual picker
         */
        "align"?: 'horizontal' | 'vertical';
        /**
          * Disables the entire component
         */
        "disabled"?: boolean;
        /**
          * This event is emitted when the selected items change
         */
        "onPickerChange"?: (event: AmalitechVisualPickerCustomEvent<{
    value: string | string[];
  }>) => void;
        /**
          * Allow single or multiselect of choices. radio for single select, and checkbox for multiple selection
         */
        "selectVariant"?: 'checkbox' | 'radio';
        /**
          * If set to true the component will only be selected by highlighting the edges, without covering the entire area.
         */
        "uncoverable"?: boolean;
    }
    interface AmalitechVisualPickerItem {
        /**
          * Disables the item thus preventing it from being selectable
         */
        "disabled"?: boolean;
        /**
          * Any label to be used with the item
         */
        "label"?: string;
        /**
          * This event is emitted when the item is selected
         */
        "onSelection"?: (event: AmalitechVisualPickerItemCustomEvent<Record<string, boolean>>) => void;
        /**
          * Allow single or multiselect of choices. radio for single select, and checkbox for multiple selection
         */
        "selectVariant"?: 'checkbox' | 'radio';
        /**
          * Indicates whether the item is selected or not
         */
        "selected"?: boolean;
        /**
          * If set to true the component will only be selected by highlighting the edges, without covering the entire area.
         */
        "uncoverable"?: boolean;
        /**
          * The value for the picker item
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "amalitech-accordion": AmalitechAccordion;
        "amalitech-alert": AmalitechAlert;
        "amalitech-alert-content": AmalitechAlertContent;
        "amalitech-breadcrumb": AmalitechBreadcrumb;
        "amalitech-breadcrumb-item": AmalitechBreadcrumbItem;
        "amalitech-button": AmalitechButton;
        "amalitech-card": AmalitechCard;
        "amalitech-checkbox": AmalitechCheckbox;
        "amalitech-data-table": AmalitechDataTable;
        "amalitech-date-picker": AmalitechDatePicker;
        "amalitech-docked-utility-bar": AmalitechDockedUtilityBar;
        "amalitech-docked-utility-body": AmalitechDockedUtilityBody;
        "amalitech-docked-utility-item": AmalitechDockedUtilityItem;
        "amalitech-input": AmalitechInput;
        "amalitech-map": AmalitechMap;
        "amalitech-modal": AmalitechModal;
        "amalitech-nav-item": AmalitechNavItem;
        "amalitech-nav-mobile": AmalitechNavMobile;
        "amalitech-navbar": AmalitechNavbar;
        "amalitech-pagination": AmalitechPagination;
        "amalitech-progress": AmalitechProgress;
        "amalitech-progress-bar": AmalitechProgressBar;
        "amalitech-progress-ring": AmalitechProgressRing;
        "amalitech-radio-button": AmalitechRadioButton;
        "amalitech-radio-group": AmalitechRadioGroup;
        "amalitech-select": AmalitechSelect;
        "amalitech-select-multiple": AmalitechSelectMultiple;
        "amalitech-select-option": AmalitechSelectOption;
        "amalitech-select-single": AmalitechSelectSingle;
        "amalitech-snackbar": AmalitechSnackbar;
        "amalitech-star-rating": AmalitechStarRating;
        "amalitech-switch": AmalitechSwitch;
        "amalitech-tab": AmalitechTab;
        "amalitech-tab-panel": AmalitechTabPanel;
        "amalitech-time-picker": AmalitechTimePicker;
        "amalitech-tree": AmalitechTree;
        "amalitech-tree-node": AmalitechTreeNode;
        "amalitech-validation": AmalitechValidation;
        "amalitech-visual-picker": AmalitechVisualPicker;
        "amalitech-visual-picker-item": AmalitechVisualPickerItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "amalitech-accordion": LocalJSX.AmalitechAccordion & JSXBase.HTMLAttributes<HTMLAmalitechAccordionElement>;
            "amalitech-alert": LocalJSX.AmalitechAlert & JSXBase.HTMLAttributes<HTMLAmalitechAlertElement>;
            "amalitech-alert-content": LocalJSX.AmalitechAlertContent & JSXBase.HTMLAttributes<HTMLAmalitechAlertContentElement>;
            "amalitech-breadcrumb": LocalJSX.AmalitechBreadcrumb & JSXBase.HTMLAttributes<HTMLAmalitechBreadcrumbElement>;
            "amalitech-breadcrumb-item": LocalJSX.AmalitechBreadcrumbItem & JSXBase.HTMLAttributes<HTMLAmalitechBreadcrumbItemElement>;
            /**
             * The Button component is a wrapper for the native button element with custom styling and variations.
             */
            "amalitech-button": LocalJSX.AmalitechButton & JSXBase.HTMLAttributes<HTMLAmalitechButtonElement>;
            "amalitech-card": LocalJSX.AmalitechCard & JSXBase.HTMLAttributes<HTMLAmalitechCardElement>;
            /**
             * Checkbox is an extension to the standard checkbox element with theming.
             */
            "amalitech-checkbox": LocalJSX.AmalitechCheckbox & JSXBase.HTMLAttributes<HTMLAmalitechCheckboxElement>;
            "amalitech-data-table": LocalJSX.AmalitechDataTable & JSXBase.HTMLAttributes<HTMLAmalitechDataTableElement>;
            "amalitech-date-picker": LocalJSX.AmalitechDatePicker & JSXBase.HTMLAttributes<HTMLAmalitechDatePickerElement>;
            "amalitech-docked-utility-bar": LocalJSX.AmalitechDockedUtilityBar & JSXBase.HTMLAttributes<HTMLAmalitechDockedUtilityBarElement>;
            "amalitech-docked-utility-body": LocalJSX.AmalitechDockedUtilityBody & JSXBase.HTMLAttributes<HTMLAmalitechDockedUtilityBodyElement>;
            "amalitech-docked-utility-item": LocalJSX.AmalitechDockedUtilityItem & JSXBase.HTMLAttributes<HTMLAmalitechDockedUtilityItemElement>;
            /**
             * The Input component is a wrapper to the HTML input element with custom styling and additional
             * functionality.
             */
            "amalitech-input": LocalJSX.AmalitechInput & JSXBase.HTMLAttributes<HTMLAmalitechInputElement>;
            "amalitech-map": LocalJSX.AmalitechMap & JSXBase.HTMLAttributes<HTMLAmalitechMapElement>;
            /**
             * The modal component is a custom element used to display content in a layer above the app.
             * it comes with default text for cancel and confirm buttons but can be customized with
             * @prop confirmText
             * @prop cancelText
             */
            "amalitech-modal": LocalJSX.AmalitechModal & JSXBase.HTMLAttributes<HTMLAmalitechModalElement>;
            "amalitech-nav-item": LocalJSX.AmalitechNavItem & JSXBase.HTMLAttributes<HTMLAmalitechNavItemElement>;
            "amalitech-nav-mobile": LocalJSX.AmalitechNavMobile & JSXBase.HTMLAttributes<HTMLAmalitechNavMobileElement>;
            /**
             * This navbar component is designed to be used with child `amalitech-nav-item` components.
             */
            "amalitech-navbar": LocalJSX.AmalitechNavbar & JSXBase.HTMLAttributes<HTMLAmalitechNavbarElement>;
            "amalitech-pagination": LocalJSX.AmalitechPagination & JSXBase.HTMLAttributes<HTMLAmalitechPaginationElement>;
            "amalitech-progress": LocalJSX.AmalitechProgress & JSXBase.HTMLAttributes<HTMLAmalitechProgressElement>;
            "amalitech-progress-bar": LocalJSX.AmalitechProgressBar & JSXBase.HTMLAttributes<HTMLAmalitechProgressBarElement>;
            "amalitech-progress-ring": LocalJSX.AmalitechProgressRing & JSXBase.HTMLAttributes<HTMLAmalitechProgressRingElement>;
            "amalitech-radio-button": LocalJSX.AmalitechRadioButton & JSXBase.HTMLAttributes<HTMLAmalitechRadioButtonElement>;
            "amalitech-radio-group": LocalJSX.AmalitechRadioGroup & JSXBase.HTMLAttributes<HTMLAmalitechRadioGroupElement>;
            /**
             * The Select component is a custom element designed to be used with child select-option elements.
             */
            "amalitech-select": LocalJSX.AmalitechSelect & JSXBase.HTMLAttributes<HTMLAmalitechSelectElement>;
            "amalitech-select-multiple": LocalJSX.AmalitechSelectMultiple & JSXBase.HTMLAttributes<HTMLAmalitechSelectMultipleElement>;
            /**
             * The select option component is designed to be nested within a select component.
             */
            "amalitech-select-option": LocalJSX.AmalitechSelectOption & JSXBase.HTMLAttributes<HTMLAmalitechSelectOptionElement>;
            "amalitech-select-single": LocalJSX.AmalitechSelectSingle & JSXBase.HTMLAttributes<HTMLAmalitechSelectSingleElement>;
            "amalitech-snackbar": LocalJSX.AmalitechSnackbar & JSXBase.HTMLAttributes<HTMLAmalitechSnackbarElement>;
            "amalitech-star-rating": LocalJSX.AmalitechStarRating & JSXBase.HTMLAttributes<HTMLAmalitechStarRatingElement>;
            /**
             * The switch component is a wrapper around the native checkbox element.
             */
            "amalitech-switch": LocalJSX.AmalitechSwitch & JSXBase.HTMLAttributes<HTMLAmalitechSwitchElement>;
            "amalitech-tab": LocalJSX.AmalitechTab & JSXBase.HTMLAttributes<HTMLAmalitechTabElement>;
            "amalitech-tab-panel": LocalJSX.AmalitechTabPanel & JSXBase.HTMLAttributes<HTMLAmalitechTabPanelElement>;
            "amalitech-time-picker": LocalJSX.AmalitechTimePicker & JSXBase.HTMLAttributes<HTMLAmalitechTimePickerElement>;
            "amalitech-tree": LocalJSX.AmalitechTree & JSXBase.HTMLAttributes<HTMLAmalitechTreeElement>;
            "amalitech-tree-node": LocalJSX.AmalitechTreeNode & JSXBase.HTMLAttributes<HTMLAmalitechTreeNodeElement>;
            /**
             * Amalitech Form Validation Feedback Component
             */
            "amalitech-validation": LocalJSX.AmalitechValidation & JSXBase.HTMLAttributes<HTMLAmalitechValidationElement>;
            "amalitech-visual-picker": LocalJSX.AmalitechVisualPicker & JSXBase.HTMLAttributes<HTMLAmalitechVisualPickerElement>;
            "amalitech-visual-picker-item": LocalJSX.AmalitechVisualPickerItem & JSXBase.HTMLAttributes<HTMLAmalitechVisualPickerItemElement>;
        }
    }
}
